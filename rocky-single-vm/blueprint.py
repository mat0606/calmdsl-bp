# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_ROCKY_KEY = read_local_file("BP_CRED_ROCKY_KEY")
BP_CRED_ROCKY2Credential_PASSWORD = read_local_file("BP_CRED_ROCKY2Credential_PASSWORD")
BP_CRED_DomainAdministrator_PASSWORD = read_local_file(
    "BP_CRED_DomainAdministrator_PASSWORD"
)

# Credentials
BP_CRED_ROCKY = basic_cred(
    "nutanix",
    BP_CRED_ROCKY_KEY,
    name="ROCKY",
    type="KEY",
    default=True,
)
BP_CRED_ROCKY2Credential = basic_cred(
    "nutanix",
    BP_CRED_ROCKY2Credential_PASSWORD,
    name="ROCKY 2 Credential",
    type="PASSWORD",
)
BP_CRED_DomainAdministrator = basic_cred(
    "administrator@ntnxlab1.local",
    BP_CRED_DomainAdministrator_PASSWORD,
    name="Domain Administrator",
    type="PASSWORD",
)


class Service1(Service):

    pass


class vmcalm_timeResources(AhvVmResources):

    memory = 2
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "rocky94-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("test-subnet", vpc="testvpc")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "vmcalm_time_cloud_init_data.yaml")
    )

    power_state = "ON"
    boot_type = "LEGACY"


class vmcalm_time(AhvVm):

    name = "vm-@@{calm_time}@@"
    resources = vmcalm_timeResources
    cluster = Ref.Cluster(name="PHX-POC155")
    categories = {"Owner": "Matthew"}


class VM1(Substrate):

    account = Ref.Account("PP Cluster")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "VM1_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_ROCKY),
    )


class VMSpecification_Update_ConfigAttrsbe262910(AhvUpdateConfigAttrs):

    memory = PatchField.Ahv.memory(
        value="2", operation="equal", max_val=16, min_val=2, editable=True
    )

    numsocket = PatchField.Ahv.numsocket(
        value="2", operation="equal", max_val=8, min_val=2, editable=True
    )

    disks = [
        PatchField.Ahv.Disks.modify(
            index=0, editable=False, operation="equal", value="30"
        ),
        PatchField.Ahv.Disks.add(AhvVmDisk.Disk.Scsi.allocateOnStorageContainer(500)),
    ]


class Package1(Package):

    services = [ref(Service1)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Installed OS Packages",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_InstalledOSPackages.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Service1),
        )

        CalmTask.Exec.ssh(
            name="Join DNS",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_JoinDNS.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Service1),
        )

        CalmTask.Exec.ssh(
            name="Validate DNS Lookup",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_ValidateDNSLookup.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Service1),
        )

        CalmTask.Exec.ssh(
            name="Validate connection to AD",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_ValidateconnectiontoAD.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Service1),
        )

        CalmTask.Exec.ssh(
            name="Synchronize time with AD",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_SynchronizetimewithAD.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Service1),
        )

        CalmTask.Exec.ssh(
            name="Join AD Domain",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_JoinADDomain.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Service1),
        )

    @action
    def __uninstall__():

        CalmTask.Exec.ssh(
            name="Unjoin AD Domain",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___uninstall___Task_UnjoinADDomain.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Service1),
        )


class deployment_1cdb06df(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(VM1)


class Default(Profile):

    environments = [Ref.Environment(name="ITC")]
    deployments = [deployment_1cdb06df]
    patch_list = [
        AppEdit.UpdateConfig(
            name="VM Specification",
            target=ref(deployment_1cdb06df),
            patch_attrs=VMSpecification_Update_ConfigAttrsbe262910,
        )
    ]

    Domain_Server = CalmVariable.Simple(
        "WIN-2U3E71T1COI",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    Domain_Server_IP = CalmVariable.Simple(
        "10.55.88.64",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    domain_name = CalmVariable.Simple(
        "ntnxlab1.local",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )


class Rocky9inVPC(Blueprint):

    services = [Service1]
    packages = [Package1]
    substrates = [VM1]
    profiles = [Default]
    credentials = [BP_CRED_ROCKY, BP_CRED_ROCKY2Credential, BP_CRED_DomainAdministrator]


class BpMetadata(Metadata):

    categories = {"TemplateType": "Vm"}
    project = Ref.Project("BP Design Project")
