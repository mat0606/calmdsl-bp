# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_ROCKY_KEY = read_local_file("BP_CRED_ROCKY_KEY")
BP_CRED_PCCredential_PASSWORD = read_local_file("BP_CRED_PCCredential_PASSWORD")
BP_CRED_ROCKY2Credential_PASSWORD = read_local_file(
    "BP_CRED_ROCKY2Credential_PASSWORD"
)

# Credentials
BP_CRED_ROCKY = basic_cred(
    "nutanix",
    BP_CRED_ROCKY_KEY,
    name="ROCKY",
    type="KEY",
    default=True,
)
BP_CRED_PCCredential = basic_cred(
    "admin",
    BP_CRED_PCCredential_PASSWORD,
    name="PC Credential",
    type="PASSWORD",
)
BP_CRED_ROCKY2Credential = basic_cred(
    "nutanix",
    BP_CRED_ROCKY2Credential_PASSWORD,
    name="ROCKY 2 Credential",
    type="PASSWORD",
)


class metalLB_service(Service):

    src_kubeconfig = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_server = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_ca = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_token = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def __start__():
        """System action for starting an application"""

        metalLB_service.InstallMetalLB(name="Install MetalLB")

    @action
    def DownloadKubeConfig(name="Download Kube Config"):

        CalmTask.SetVariable.escript.py3(
            name="Get Src Kubeconfig",
            filename=os.path.join(
                "scripts",
                "Service_metalLB_service_Action_DownloadKubeConfig_Task_GetSrcKubeconfig.py",
            ),
            target=ref(metalLB_service),
            variables=["src_kubeconfig"],
        )

        CalmTask.Exec.ssh(
            name="Output Kubeconfig files",
            filename=os.path.join(
                "scripts",
                "Service_metalLB_service_Action_DownloadKubeConfig_Task_OutputKubeconfigfiles.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(metalLB_service),
        )

    @action
    def UninstallMetalLB(name="Uninstall MetalLB"):

        CalmTask.Exec.ssh(
            name="Uninstall MetalLB",
            filename=os.path.join(
                "scripts",
                "Service_metalLB_service_Action_UninstallMetalLB_Task_UninstallMetalLB.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(metalLB_service),
        )

    @action
    def InstallMetalLB(name="Install MetalLB"):

        CalmTask.Exec.ssh(
            name="Install MetalLB",
            filename=os.path.join(
                "scripts",
                "Service_metalLB_service_Action_InstallMetalLB_Task_InstallMetalLB.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(metalLB_service),
        )

        CalmTask.Delay(
            name="Wait for MetalLB to start",
            delay_seconds=60,
            target=ref(metalLB_service),
        )

        CalmTask.Exec.ssh(
            name="Configure MetalLB",
            filename=os.path.join(
                "scripts",
                "Service_metalLB_service_Action_InstallMetalLB_Task_ConfigureMetalLB.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(metalLB_service),
        )

        CalmTask.Delay(
            name="Delay for 30 seconds", delay_seconds=30, target=ref(metalLB_service)
        )

        CalmTask.Exec.ssh(
            name="Configure L2 Advertisement",
            filename=os.path.join(
                "scripts",
                "Service_metalLB_service_Action_InstallMetalLB_Task_ConfigureL2Advertisement.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(metalLB_service),
        )

    @action
    def InstallHelm(name="Install Helm"):

        CalmTask.Exec.ssh(
            name="Install Helm3",
            filename=os.path.join(
                "scripts",
                "Service_metalLB_service_Action_InstallHelm_Task_InstallHelm3.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(metalLB_service),
        )

    @action
    def InstallMetalLBusingHelm(name="Install MetalLB using Helm"):
        """Not in use"""

        metalLB_service.InstallHelm(name="Install Helm3")

        CalmTask.Exec.ssh(
            name="Install MetalLB using Helm3",
            filename=os.path.join(
                "scripts",
                "Service_metalLB_service_Action_InstallMetalLBusingHelm_Task_InstallMetalLBusingHelm3.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(metalLB_service),
        )


class MO_MetalLBcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 2
    vCPUs = 1
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "rocky94-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("Primary_44", cluster="DM3-POC044")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join(
            "specs", "MO_MetalLBcalm_array_indexcalm_time_cloud_init_data.yaml"
        )
    )

    power_state = "ON"


class MO_MetalLBcalm_array_indexcalm_time(AhvVm):

    name = "MO_MetalLB-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = MO_MetalLBcalm_array_indexcalm_timeResources
    cluster = Ref.Cluster(name="DM3-POC044")


class metalLB_vm(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_OTC")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = MO_MetalLBcalm_array_indexcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "metalLB_vm_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="10",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_ROCKY),
    )


class Package4(Package):

    services = [ref(metalLB_service)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Install Curl",
            filename=os.path.join(
                "scripts", "Package_Package4_Action___install___Task_InstallCurl.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(metalLB_service),
        )

        metalLB_service.DownloadKubeConfig(name="Download Kube Config")

        CalmTask.Exec.ssh(
            name="Install Kubectl",
            filename=os.path.join(
                "scripts", "Package_Package4_Action___install___Task_InstallKubectl.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(metalLB_service),
        )


class d8a66e6a_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package4)]
    substrate = ref(metalLB_vm)


class Default(Profile):

    deployments = [d8a66e6a_deployment]

    MetalLB_version = CalmVariable.Simple(
        "0.13.12",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    End_IP = CalmVariable.Simple(
        "10.55.44.46",
        label="Please key in the end IP address",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    Start_IP = CalmVariable.Simple(
        "10.55.44.42",
        label="Please key in the start IP address",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    SRC_KUBE_CONTEXT = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py3(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_Default_variable_SRC_KUBE_CONTEXT_Task_SampleTask.py",
            ),
        ),
        label="",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    PC_IP = CalmVariable.Simple(
        "10.55.44.40",
        label="Please key in the Prism Central IP",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="Prism Central IP",
    )

    @action
    def DownloadKubeConfig(name="Download Kube Config"):

        metalLB_service.DownloadKubeConfig(name="Download Kube Config")

    @action
    def UninstallMetalLB(name="Uninstall MetalLB"):

        metalLB_service.UninstallMetalLB(name="Uninstall MetalLB")

    @action
    def InstallMetalLB(name="Install MetalLB"):

        metalLB_service.InstallMetalLB(name="Install MetalLB")


class MetalLB_centos20240702(Blueprint):

    services = [metalLB_service]
    packages = [Package4]
    substrates = [metalLB_vm]
    profiles = [Default]
    credentials = [BP_CRED_ROCKY, BP_CRED_PCCredential, BP_CRED_ROCKY2Credential]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
