# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables

BP_CRED_PE_Creds_PASSWORD = read_local_file("BP_CRED_PE_Creds_PASSWORD")
BP_CRED_PC_Creds_PASSWORD = read_local_file("BP_CRED_PC_Creds_PASSWORD")
BP_CRED_CENTOS_KEY = read_local_file("BP_CRED_CENTOS_KEY")
BP_CRED_Centos2Credential_PASSWORD = read_local_file(
    "BP_CRED_Centos2Credential_PASSWORD"
)
BP_CRED_PE_SC_Creds_PASSWORD = read_local_file("BP_CRED_PE_SC_Creds_PASSWORD")
BP_CRED_CalmVM_Cred_PASSWORD = read_local_file("BP_CRED_CalmVM_Cred_PASSWORD")
BP_CRED_PE_SC_Creds2_PASSWORD = read_local_file("BP_CRED_PE_SC_Creds2_PASSWORD")
BP_CRED_PE_SC_Creds3_PASSWORD = read_local_file("BP_CRED_PE_SC_Creds3_PASSWORD")
BP_CRED_PE_SC_Creds4_PASSWORD = read_local_file("BP_CRED_PE_SC_Creds4_PASSWORD")
BP_CRED_PE_SC_Creds5_PASSWORD = read_local_file("BP_CRED_PE_SC_Creds5_PASSWORD")

# Credentials
BP_CRED_PE_Creds = basic_cred(
    "admin",
    BP_CRED_PE_Creds_PASSWORD,
    name="PE_Creds",
    type="PASSWORD",
    default=True,
)
BP_CRED_PC_Creds = basic_cred(
    "admin",
    BP_CRED_PC_Creds_PASSWORD,
    name="PC_Creds",
    type="PASSWORD",
)
BP_CRED_CENTOS = basic_cred(
    "centos",
    BP_CRED_CENTOS_KEY,
    name="CENTOS",
    type="KEY",
)
BP_CRED_Centos2Credential = basic_cred(
    "centos",
    BP_CRED_Centos2Credential_PASSWORD,
    name="Centos 2 Credential",
    type="PASSWORD",
)
BP_CRED_PE_SC_Creds = basic_cred(
    "admin",
    BP_CRED_PE_SC_Creds_PASSWORD,
    name="PE_SC_Creds",
    type="PASSWORD",
)
BP_CRED_CalmVM_Cred = basic_cred(
    "admin",
    BP_CRED_CalmVM_Cred_PASSWORD,
    name="CalmVM_Cred",
    type="PASSWORD",
)
BP_CRED_PE_SC_Creds2 = basic_cred(
    "admin",
    BP_CRED_PE_SC_Creds2_PASSWORD,
    name="PE_SC_Creds2",
    type="PASSWORD",
)
BP_CRED_PE_SC_Creds3 = basic_cred(
    "admin",
    BP_CRED_PE_SC_Creds3_PASSWORD,
    name="PE_SC_Creds3",
    type="PASSWORD",
)
BP_CRED_PE_SC_Creds4 = basic_cred(
    "admin",
    BP_CRED_PE_SC_Creds4_PASSWORD,
    name="PE_SC_Creds4",
    type="PASSWORD",
)
BP_CRED_PE_SC_Creds5 = basic_cred(
    "admin",
    BP_CRED_PE_SC_Creds5_PASSWORD,
    name="PE_SC_Creds5",
    type="PASSWORD",
)


AHV_78 = vm_disk_package(
    name="AHV_78",
    description="",
    config={
        "name": "AHV_78",
        "image": {
            "name": "AHV_78",
            "type": "DISK_IMAGE",
            "source": "http://download.nutanix.com/Calm/CentOS-7-x86_64-2003.qcow2",
            "architecture": "X86_64",
        },
        "product": {"name": "AHV", "version": "7_8"},
        "checksum": {},
    },
)


class Karbon(Service):

    task_uuid = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    SUBNET_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    PE_Cluster_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_kubeconfig = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_server = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_ca = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_token = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    username = CalmVariable.Simple(
        "",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="ssh username",
    )

    private_key = CalmVariable.Simple.multiline(
        "",
        label="",
        regex="^(.|\n)*$",
        validate_regex=False,
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="ssh certificate private key",
    )

    certificate = CalmVariable.Simple(
        "",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="ssh certificate",
    )

    centos_pub_key = CalmVariable.Simple(
        "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAii7qFDhVadLx5lULAG/ooCUTA/ATSmXbArs+GdHxbUWd/bNGZCXnaQ2L1mSVVGDxfTbSaTJ3En3tVlMtD2RjZPdhqWESCaoj2kXLYSiNDS9qz3SK6h822je/f9O9CzCTrw2XGhnDVwmNraUvO5wmQObCDthTXc72PcBOd6oa4ENsnuY9HtiETg29TZXgCYPFXipLBHSZYkBmGgccAeY9dq5ywiywBJLuoSovXkkRJk3cd7GyhCRIwYzqfdgSmiAMYgJLrz/UuLxatPqXts2D8v1xqR9EPNZNzgd4QHK4of1lqsNRuz2SxkwqLcXSw0mGcAL8mIwVpzhPzwmENC5Orw== rsa-key-20190108",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    @action
    def __create__():
        """System action for creating an application"""

        Karbon.DownloadKubeConfig(name="Download Kube Config")

    @action
    def DownloadKubeConfig(name="Download Kube Config"):

        CalmTask.SetVariable.escript.py2(
            name="Get Kubeconfig",
            filename=os.path.join(
                "scripts",
                "Service_Karbon_Action_DownloadKubeConfig_Task_GetKubeconfig.py",
            ),
            target=ref(Karbon),
            variables=[],
        )

        CalmTask.Exec.ssh(
            name="Output Kubeconfig file",
            filename=os.path.join(
                "scripts",
                "Service_Karbon_Action_DownloadKubeConfig_Task_OutputKubeconfigfile.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(Karbon),
        )

    @action
    def AddWorkerNodeinNodePool(name="Add Worker Node in NodePool"):

        task_uuid = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )
        CalmTask.SetVariable.escript.py2(
            name="Add Worker Node",
            filename=os.path.join(
                "scripts",
                "Service_Karbon_Action_AddWorkerNodeinNodePool_Task_AddWorkerNode.py",
            ),
            target=ref(Karbon),
            variables=["task_uuid"],
        )

        CalmTask.Delay(name="Wait for 2 mins", delay_seconds=120, target=ref(Karbon))

        CalmTask.Exec.escript.py2(
            name="Check Task Status",
            filename=os.path.join(
                "scripts",
                "Service_Karbon_Action_AddWorkerNodeinNodePool_Task_CheckTaskStatus.py",
            ),
            target=ref(Karbon),
        )

    @action
    def DeleteWorkerNodeinNodePool(name="Delete Worker Node in Node Pool"):

        task_uuid = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )
        CalmTask.SetVariable.escript.py2(
            name="Delete Worker Node",
            filename=os.path.join(
                "scripts",
                "Service_Karbon_Action_DeleteWorkerNodeinNodePool_Task_DeleteWorkerNode.py",
            ),
            target=ref(Karbon),
            variables=["task_uuid"],
        )

        CalmTask.Delay(name="Delay for 5 seconds", delay_seconds=5, target=ref(Karbon))

        CalmTask.Exec.escript.py2(
            name="Check for Task Status",
            filename=os.path.join(
                "scripts",
                "Service_Karbon_Action_DeleteWorkerNodeinNodePool_Task_CheckforTaskStatus.py",
            ),
            target=ref(Karbon),
        )

    @action
    def CreateNodePool(name="Create Node Pool"):

        CalmTask.SetVariable.escript.py2(
            name="Create new Node Pool",
            filename=os.path.join(
                "scripts",
                "Service_Karbon_Action_CreateNodePool_Task_CreatenewNodePool.py",
            ),
            target=ref(Karbon),
            variables=["task_uuid"],
        )

        CalmTask.Delay(name="Wait for 2 mins", delay_seconds=120, target=ref(Karbon))

        CalmTask.Exec.escript.py2(
            name="Check Task Status",
            filename=os.path.join(
                "scripts",
                "Service_Karbon_Action_CreateNodePool_Task_CheckTaskStatus.py",
            ),
            target=ref(Karbon),
        )

    @action
    def DeleteNodePool(name="Delete Node Pool"):

        CalmTask.SetVariable.escript.py2(
            name="Delete Node Pool",
            filename=os.path.join(
                "scripts", "Service_Karbon_Action_DeleteNodePool_Task_DeleteNodePool.py"
            ),
            target=ref(Karbon),
            variables=["task_uuid"],
        )

        CalmTask.Delay(name="Wait for 10 seconds", delay_seconds=10, target=ref(Karbon))

        CalmTask.Exec.escript.py2(
            name="Check for Task Status",
            filename=os.path.join(
                "scripts",
                "Service_Karbon_Action_DeleteNodePool_Task_CheckforTaskStatus.py",
            ),
            target=ref(Karbon),
        )

    @action
    def GetSSHKey():

        CalmTask.SetVariable.escript.py2(
            name="GetSSHKey",
            filename=os.path.join(
                "scripts", "Service_Karbon_Action_GetSSHKey_Task_GetSSHKey.py"
            ),
            target=ref(Karbon),
            variables=["certificate", "username", "karbon_ssh"],
        )

        CalmTask.Exec.ssh(
            name="Output ssh key",
            filename=os.path.join(
                "scripts", "Service_Karbon_Action_GetSSHKey_Task_Outputsshkey.sh"
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(Karbon),
        )

    @action
    def CreateK8Scluster(name="Create K8S cluster"):

        with parallel() as p0:
            with branch(p0):
                CalmTask.SetVariable.escript.py2(
                    name="Get PE SC Credential",
                    filename=os.path.join(
                        "scripts",
                        "Service_Karbon_Action_CreateK8Scluster_Task_GetPESCCredential.py",
                    ),
                    target=ref(Karbon),
                    variables=["pe_sc_credentia"],
                )

                CalmTask.SetVariable.escript.py2(
                    name="GetNetworkUUID",
                    filename=os.path.join(
                        "scripts",
                        "Service_Karbon_Action_CreateK8Scluster_Task_GetNetworkUUID.py",
                    ),
                    target=ref(Karbon),
                    variables=[],
                )

                CalmTask.Exec.escript.py2(
                    name="Create K8S cluster",
                    filename=os.path.join(
                        "scripts",
                        "Service_Karbon_Action_CreateK8Scluster_Task_CreateK8Scluster.py",
                    ),
                    target=ref(Karbon),
                )

                CalmTask.Delay(
                    name="Delay for 10 mins", delay_seconds=600, target=ref(Karbon)
                )

                CalmTask.Exec.escript.py2(
                    name="Check Cluster Health Status",
                    filename=os.path.join(
                        "scripts",
                        "Service_Karbon_Action_CreateK8Scluster_Task_CheckClusterHealthStatus.py",
                    ),
                    target=ref(Karbon),
                )
            with branch(p0):
                CalmTask.Exec.ssh(
                    name="Base Setup",
                    filename=os.path.join(
                        "scripts",
                        "Service_Karbon_Action_CreateK8Scluster_Task_BaseSetup.sh",
                    ),
                    cred=ref(BP_CRED_CENTOS),
                    target=ref(Karbon),
                )

                CalmTask.Exec.ssh(
                    name="Install kubectl",
                    filename=os.path.join(
                        "scripts",
                        "Service_Karbon_Action_CreateK8Scluster_Task_Installkubectl.sh",
                    ),
                    cred=ref(BP_CRED_CENTOS),
                    target=ref(Karbon),
                )

                Karbon.InstallHelm(name="Install Helm")

    @action
    def InstallHelm(name="Install Helm"):

        CalmTask.Exec.ssh(
            name="Install Helm",
            filename=os.path.join(
                "scripts", "Service_Karbon_Action_InstallHelm_Task_InstallHelm.sh"
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(Karbon),
        )


class vmcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 2
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(AHV_78, bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("Primary_178", cluster="PHX-POC178")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join(
            "specs", "vmcalm_array_indexcalm_time_cloud_init_data.yaml"
        )
    )


class vmcalm_array_indexcalm_time(AhvVm):

    name = "vm-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = vmcalm_array_indexcalm_timeResources
    cluster = Ref.Cluster(name="PHX-POC178")


class Karbon_AHV(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_178")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_array_indexcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "Karbon_AHV_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class vmcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 2
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(AHV_78, bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("Primary_178", cluster="PHX-POC178")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join(
            "specs", "vmcalm_array_indexcalm_time_cloud_init_data.yaml"
        )
    )


class vmcalm_array_indexcalm_time(AhvVm):

    name = "vm-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = vmcalm_array_indexcalm_timeResources
    cluster = Ref.Cluster(name="PHX-POC178")


class Karbon_AHV_2(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_178")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_array_indexcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "Karbon_AHV_2_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class vmcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 2
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(AHV_78, bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("Primary_178", cluster="PHX-POC178")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join(
            "specs", "vmcalm_array_indexcalm_time_cloud_init_data.yaml"
        )
    )


class vmcalm_array_indexcalm_time(AhvVm):

    name = "vm-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = vmcalm_array_indexcalm_timeResources
    cluster = Ref.Cluster(name="PHX-POC178")


class Karbon_AHV_2_3(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_178")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_array_indexcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "Karbon_AHV_2_3_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class Package1(Package):

    services = [ref(Karbon)]

    @action
    def __install__():

        Karbon.CreateK8Scluster(name="Create K8S cluster")

    @action
    def __uninstall__():

        CalmTask.Exec.escript.py2(
            name="Delete K8S cluster",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___uninstall___Task_DeleteK8Scluster.py",
            ),
            target=ref(Karbon),
        )


class Package2(Package):

    services = [ref(Karbon)]

    @action
    def __install__():

        Karbon.CreateK8Scluster(name="Create K8S cluster")


class Package3(Package):

    services = [ref(Karbon)]

    @action
    def __install__():

        Karbon.CreateK8Scluster(name="Create K8S cluster")


class _75513331_deployment(Deployment):

    name = "75513331_deployment"
    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(Karbon_AHV)


class ec3c7adf_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package2)]
    substrate = ref(Karbon_AHV_2)


class b45aa011_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package3)]
    substrate = ref(Karbon_AHV_2_3)


class SingleMaster(Profile):

    name = "Single Master"

    deployments = [_75513331_deployment]

    PC_IP = CalmVariable.Simple(
        "10.38.178.39",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    CalmVM_IP = CalmVariable.Simple(
        "10.38.178.40",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="CalmVM_IP is used to capture the Calm VM IP.  If Calm is in the same PC, CalmVM_IP value will be the same as PC_IP",
    )

    calico_cidr = CalmVariable.Simple(
        "172.20.0.0/16",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="This field was applicable when Calico was chosen as the K8S Network ",
    )

    pod_cidr_range = CalmVariable.Simple(
        "172.20.0.0/16",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    service_cidr_range = CalmVariable.Simple(
        "172.19.0.0/16",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    worker_node_cpu = CalmVariable.Simple.int(
        "4",
        label="Please key in the Worker Node CPU",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    worker_node_memory = CalmVariable.Simple.int(
        "8",
        label="Worker Node Memory (Gb)",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    worker_node_disk_size = CalmVariable.Simple.int(
        "120",
        label="Worker Node Disk Size (Gb)",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    External_LB = CalmVariable.Simple(
        "10.38.178.103",
        label="Please key in the external Load Balancer",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="Applicable for Active-Active Master with Load Balancer option",
    )

    Master_VIP2 = CalmVariable.Simple(
        "",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="This field is applicable for load balancer Master Nodes",
    )

    Master_VIP = CalmVariable.Simple(
        "",
        label="Master VIP",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="Applicable for Master Active Passive configuration only",
    )

    No_Worker_Node = CalmVariable.Simple.int(
        "1",
        label="Number of Worker Node",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    file_system = CalmVariable.WithOptions.Predefined.Array(
        ["ext4", "xfs"],
        label="Select the File System for the Storage Class",
        defaults=["ext4"],
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    image_name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_SingleMaster_variable_image_name_Task_SampleTask.py"
            ),
        ),
        label="Please select the Image Name",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    network_name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_SingleMaster_variable_network_name_Task_SampleTask.py",
            ),
        ),
        label="Please select the network",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    Storage_Container = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_SingleMaster_variable_Storage_Container_Task_SampleTask.py",
            ),
        ),
        label="Please select the Storage Container in the Cluster",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    Kubernetes_Node_Network = CalmVariable.WithOptions.Predefined.Array(
        ["Flannel", "Calico"],
        label="Please select the Kubernetes Node Network",
        defaults=[""],
        regex="^.*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    PE_IP = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_SingleMaster_variable_PE_IP_Task_SampleTask.py"
            ),
        ),
        label="Nutanix Cluster IP",
        is_mandatory=False,
        is_hidden=False,
        description="",
    )

    nutanix_cluster_uuid = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_SingleMaster_variable_nutanix_cluster_uuid_Task_SampleTask.py",
            ),
        ),
        label="Nutanix Cluster uuid",
        is_mandatory=False,
        is_hidden=False,
        description="",
    )

    nutanix_cluster = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_SingleMaster_variable_nutanix_cluster_Task_SampleTask.py",
            ),
        ),
        label="Please select the Nutanix Cluster",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    Master_Config = CalmVariable.WithOptions.Predefined.Array(
        ["Single Master", "Active-Passive", "Active-Active Load Balancer"],
        label="Select the Type of Master Node",
        defaults=["Single Master"],
        regex="^.*$",
        validate_regex=False,
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    K8S_Version = CalmVariable.WithOptions.Predefined.Array(
        ["1.23.16-0", "1.24.10-0", "1.25.6-1", "1.26.8-0"],
        label="Please select the Kubernetes version",
        defaults=["1.26.8-0"],
        regex="^.*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    node_pool = CalmVariable.Simple(
        "worker-node-pool",
        label="Please key in the Worker Node Pool Name",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    cluster_name = CalmVariable.Simple(
        "mo-dev",
        label="Please key in the Kubernetes Cluster Name",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def DownloadKubeConfig(name="Download Kube Config"):

        Karbon.DownloadKubeConfig(name="Download Kube Config")

    @action
    def AddWorkerNode(name="Add Worker Node"):

        add_worker_node_count = CalmVariable.Simple.int(
            "1",
            label="Please key in the no of worker nodes to add",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_pool_name = CalmVariable.WithOptions.FromTask(
            CalmTask.Exec.escript.py2(
                name="",
                filename=os.path.join(
                    "scripts",
                    "Profile_SingleMaster_Action_AddWorkerNode_variable_node_pool_name_Task_SampleTask.py",
                ),
            ),
            label="Please select the node pool name",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        Karbon.AddWorkerNodeinNodePool(name="Add Worker Node in NodePool")

    @action
    def DeleteWorkerNode(name="Delete Worker Node"):

        remove_worker_node_count = CalmVariable.Simple.int(
            "1",
            label="Please key in the no of worker nodes to remove",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_pool_name = CalmVariable.WithOptions.FromTask(
            CalmTask.Exec.escript.py2(
                name="",
                filename=os.path.join(
                    "scripts",
                    "Profile_SingleMaster_Action_DeleteWorkerNode_variable_node_pool_name_Task_SampleTask.py",
                ),
            ),
            label="Please select the Node Pool",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        Karbon.DeleteWorkerNodeinNodePool(name="Delete Worker Node in Node Pool")

    @action
    def CreateNewPoolNode(name="Create New Pool Node"):

        gpu_model = CalmVariable.Simple(
            "Nvidia A100",
            label="Please key in the GPU Model",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )
        node_disk_mib = CalmVariable.Simple.int(
            "122880",
            label="Please key in the hard disk per node",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The default value is 120 GB per node",
        )
        node_memory_mib = CalmVariable.Simple.int(
            "8192",
            label="Please key in the node memory in Mib",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_cpu = CalmVariable.Simple.int(
            "8",
            label="Please key in the number of vCPU for the node pool",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        num_nodes = CalmVariable.Simple.int(
            "1",
            label="Please key in the number of nodes in the Node Pool",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_pool_name = CalmVariable.Simple(
            "",
            label="Please key in the new Node Pool Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        Karbon.CreateNodePool(name="Create Node Pool")

    @action
    def DeleteNodePool(name="Delete Node Pool"):

        node_pool_name = CalmVariable.WithOptions.FromTask(
            CalmTask.Exec.escript.py2(
                name="",
                filename=os.path.join(
                    "scripts",
                    "Profile_SingleMaster_Action_DeleteNodePool_variable_node_pool_name_Task_SampleTask.py",
                ),
            ),
            label="Please select the node pool",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        Karbon.DeleteNodePool(name="Delete Node Pool")

    @action
    def GetSSHKey():

        Karbon.GetSSHKey(name="GetSSHKey")


class ActivePassiveMaster(Profile):

    name = "Active Passive Master"

    deployments = [ec3c7adf_deployment]

    PC_IP = CalmVariable.Simple(
        "10.38.178.39",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    CalmVM_IP = CalmVariable.Simple(
        "10.38.178.40",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    pod_cidr_range = CalmVariable.Simple(
        "172.20.0.0/16",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    service_cidr_range = CalmVariable.Simple(
        "172.19.0.0/16",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    worker_node_cpu = CalmVariable.Simple.int(
        "4",
        label="Please key in the Worker Node CPU",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    worker_node_memory = CalmVariable.Simple.int(
        "8",
        label="Worker Node Memory (Gb)",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    worker_node_disk_size = CalmVariable.Simple.int(
        "120",
        label="Worker Node Disk Size (Gb)",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    External_LB = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=True, runtime=False, description=""
    )

    Master_VIP2 = CalmVariable.Simple(
        "10.38.178.102",
        label="Master VIP2",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="This field is applicable for load balancer Master Nodes",
    )

    Master_VIP = CalmVariable.Simple(
        "10.38.178.101",
        label="Master VIP",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="Applicable for Master Active Passive configuration only",
    )

    No_Worker_Node = CalmVariable.Simple.int(
        "1",
        label="Please key in the no of worker node",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    file_system = CalmVariable.WithOptions.Predefined.Array(
        ["ext4", "xfs"],
        label="Select the File System for the Storage Class",
        defaults=["ext4"],
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    image_name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_ActivePassiveMaster_variable_image_name_Task_SampleTask.py",
            ),
        ),
        label="Please select the Image Name",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    network_name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_ActivePassiveMaster_variable_network_name_Task_SampleTask.py",
            ),
        ),
        label="Please select the Network in the Cluster",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    Storage_Container = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_ActivePassiveMaster_variable_Storage_Container_Task_SampleTask.py",
            ),
        ),
        label="Please select the Storage Container in the Cluster",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    Kubernetes_Node_Network = CalmVariable.WithOptions.Predefined.Array(
        ["Flannel", "Calico"],
        label="Please select the Kubernetes Node Network",
        defaults=[""],
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    PE_IP = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_ActivePassiveMaster_variable_PE_IP_Task_SampleTask.py",
            ),
        ),
        label="Nutanix Cluster IP",
        is_mandatory=False,
        is_hidden=False,
        description="",
    )

    nutanix_cluster_uuid = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_ActivePassiveMaster_variable_nutanix_cluster_uuid_Task_SampleTask.py",
            ),
        ),
        label="",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    nutanix_cluster = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_ActivePassiveMaster_variable_nutanix_cluster_Task_SampleTask.py",
            ),
        ),
        label="Please select the Nutanix cluster",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    Master_Config = CalmVariable.Simple(
        "Active-Passive",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    K8S_Version = CalmVariable.WithOptions.Predefined.Array(
        ["1.23.16-0", "1.24.10-0", "1.25.6-1", "1.26.8-0"],
        label="Please select the Kubernetes version",
        defaults=["1.26.8-0"],
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    node_pool = CalmVariable.Simple(
        "worker-node-pool",
        label="Please key in the worker node pool",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    cluster_name = CalmVariable.Simple(
        "karbon",
        label="Please key in the Kubernetes Cluster Name",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def DownloadKubeConfig(name="Download Kube Config"):

        Karbon.DownloadKubeConfig(name="Download Kube Config")

    @action
    def AddWorkerNode(name="Add Worker Node"):

        add_worker_node_count = CalmVariable.Simple.int(
            "1",
            label="Please key in the no of worker nodes to add",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_pool_name = CalmVariable.WithOptions.FromTask(
            CalmTask.Exec.escript.py2(
                name="",
                filename=os.path.join(
                    "scripts",
                    "Profile_ActivePassiveMaster_Action_AddWorkerNode_variable_node_pool_name_Task_SampleTask.py",
                ),
            ),
            label="Please select the node pool name",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        Karbon.AddWorkerNodeinNodePool(name="Add Worker Node in NodePool")

    @action
    def DeleteWorkerNode(name="Delete Worker Node"):

        remove_worker_node_count = CalmVariable.Simple.int(
            "1",
            label="Please key in the no of worker nodes to remove",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_pool_name = CalmVariable.WithOptions.FromTask(
            CalmTask.Exec.escript.py2(
                name="",
                filename=os.path.join(
                    "scripts",
                    "Profile_ActivePassiveMaster_Action_DeleteWorkerNode_variable_node_pool_name_Task_SampleTask.py",
                ),
            ),
            label="Please select the Node Pool",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        Karbon.DeleteWorkerNodeinNodePool(name="Delete Worker Node in Node Pool")

    @action
    def CreateNewNodePool(name="Create New Node Pool"):

        gpu_model = CalmVariable.Simple(
            "Nvidia A100",
            label="Please key in the GPU Model",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )
        node_disk_mib = CalmVariable.Simple.int(
            "122880",
            label="Please key in the hard disk per node",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_memory_mib = CalmVariable.Simple.int(
            "8192",
            label="Please key in the node memory in Mib",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_cpu = CalmVariable.Simple.int(
            "8",
            label="Please key in the number of vCPU for the node pool",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        num_nodes = CalmVariable.Simple.int(
            "1",
            label="Please key in the number of nodes in the Node Pool",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_pool_name = CalmVariable.Simple(
            "",
            label="Please key in the new Node Pool Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        Karbon.CreateNodePool(name="Create Node Pool")

    @action
    def DeleteNodePool(name="Delete Node Pool"):

        node_pool_name = CalmVariable.WithOptions.FromTask(
            CalmTask.Exec.escript.py2(
                name="",
                filename=os.path.join(
                    "scripts",
                    "Profile_ActivePassiveMaster_Action_DeleteNodePool_variable_node_pool_name_Task_SampleTask.py",
                ),
            ),
            label="Please select the Node Pool Name",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        Karbon.DeleteNodePool(name="Delete Node Pool")

    @action
    def GetSSHKey():

        Karbon.GetSSHKey(name="GetSSHKey")


class ActiveActiveMaster(Profile):

    name = "Active Active Master"

    deployments = [b45aa011_deployment]

    PC_IP = CalmVariable.Simple(
        "10.38.178.39",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    CalmVM_IP = CalmVariable.Simple(
        "10.38.178.40",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    pod_cidr_range = CalmVariable.Simple(
        "172.20.0.0/16",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    service_cidr_range = CalmVariable.Simple(
        "172.19.0.0/16",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    worker_node_cpu = CalmVariable.Simple.int(
        "4",
        label="Please key in the Worker Node CPU",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    worker_node_memory = CalmVariable.Simple.int(
        "8",
        label="Worker Node Memory (Gb)",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    worker_node_disk_size = CalmVariable.Simple.int(
        "120",
        label="Worker Node Disk Size (Gb)",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    External_LB = CalmVariable.Simple(
        "10.38.178.103",
        label="Please key in the external Load Balancer",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    Master_VIP2 = CalmVariable.Simple(
        "10.38.78.102",
        label="Master VIP2",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="This field is applicable for load balancer Master Nodes",
    )

    Master_VIP = CalmVariable.Simple(
        "10.38.178.101",
        label="Master VIP",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="Applicable for Master Active Passive configuration only",
    )

    No_Worker_Node = CalmVariable.Simple.int(
        "1",
        label="Please key in the no of worker node",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    file_system = CalmVariable.WithOptions.Predefined.Array(
        ["ext4", "xfs"],
        label="Select the File System for the Storage Class",
        defaults=["ext4"],
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    image_name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_ActiveActiveMaster_variable_image_name_Task_SampleTask.py",
            ),
        ),
        label="Please select the Image Name",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    network_name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_ActiveActiveMaster_variable_network_name_Task_SampleTask.py",
            ),
        ),
        label="Please select the Network in the Cluster",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    Storage_Container = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_ActiveActiveMaster_variable_Storage_Container_Task_SampleTask.py",
            ),
        ),
        label="Please select the Storage Container in the Cluster",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    Kubernetes_Node_Network = CalmVariable.WithOptions.Predefined.Array(
        ["Flannel", "Calico"],
        label="Please select the Kubernetes Node Network",
        defaults=[""],
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    PE_IP = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_ActiveActiveMaster_variable_PE_IP_Task_SampleTask.py",
            ),
        ),
        label="Nutanix Cluster IP",
        is_mandatory=False,
        is_hidden=False,
        description="",
    )

    nutanix_cluster_uuid = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_ActiveActiveMaster_variable_nutanix_cluster_uuid_Task_SampleTask.py",
            ),
        ),
        label="",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    nutanix_cluster = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_ActiveActiveMaster_variable_nutanix_cluster_Task_SampleTask.py",
            ),
        ),
        label="Please select the Nutanix cluster",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    Master_Config = CalmVariable.Simple(
        "Active-Active Load Balancer",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    K8S_Version = CalmVariable.WithOptions.Predefined.Array(
        ["1.23.16-0", "1.24.10-0", "1.25.6-1", "1.26.8-0"],
        label="Please select the Kubernetes version",
        defaults=["1.26.8-0"],
        regex="^.*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    node_pool = CalmVariable.Simple(
        "worker-node-pool",
        label="Please key in the worker node pool",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    cluster_name = CalmVariable.Simple(
        "karbon",
        label="Please key in the Kubernetes Cluster Name",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def DownloadKuheConfig(name="Download Kuhe Config"):

        Karbon.DownloadKubeConfig(name="Download Kube Config")

    @action
    def AddWorkerNode(name="Add Worker Node"):

        add_worker_node_count = CalmVariable.Simple.int(
            "1",
            label="Please key in the no of worker nodes to add",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_pool_name = CalmVariable.WithOptions.FromTask(
            CalmTask.Exec.escript.py2(
                name="",
                filename=os.path.join(
                    "scripts",
                    "Profile_ActiveActiveMaster_Action_AddWorkerNode_variable_node_pool_name_Task_SampleTask.py",
                ),
            ),
            label="Please select the Node Pool Name",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        Karbon.AddWorkerNodeinNodePool(name="Add Worker Node in NodePool")

    @action
    def DeleteWorkerNode(name="Delete Worker Node"):

        remove_worker_node_count = CalmVariable.Simple.int(
            "1",
            label="Please key in the no of worker nodes to remove",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_pool_name = CalmVariable.WithOptions.FromTask(
            CalmTask.Exec.escript.py2(
                name="",
                filename=os.path.join(
                    "scripts",
                    "Profile_ActiveActiveMaster_Action_DeleteWorkerNode_variable_node_pool_name_Task_SampleTask.py",
                ),
            ),
            label="Please select the Node Pool",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        Karbon.DeleteWorkerNodeinNodePool(name="Delete Worker Node in Node Pool")

    @action
    def CreateNewNodePool(name="Create New Node Pool"):

        gpu_model = CalmVariable.Simple(
            "Nvidia A100",
            label="Please key in the GPU Model",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_disk_mib = CalmVariable.Simple.int(
            "122880",
            label="Please key in the node memory in Mib",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_memory_mib = CalmVariable.Simple.int(
            "8192",
            label="Please key in the hard disk per node",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_cpu = CalmVariable.Simple.int(
            "8",
            label="Please key in the number of vCPU for the node pool",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        num_nodes = CalmVariable.Simple.int(
            "1",
            label="Please key in the number of nodes in the Node Pool",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        node_pool_name = CalmVariable.Simple(
            "",
            label="Please key in the new Node Pool Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        Karbon.CreateNodePool(name="Create Node Pool")

    @action
    def DeleteNodePool(name="Delete Node Pool"):

        node_pool_name = CalmVariable.WithOptions.FromTask(
            CalmTask.Exec.escript.py2(
                name="",
                filename=os.path.join(
                    "scripts",
                    "Profile_ActiveActiveMaster_Action_DeleteNodePool_variable_node_pool_name_Task_SampleTask.py",
                ),
            ),
            label="Please select the Node Pool",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        Karbon.DeleteNodePool(name="Delete Node Pool")

    @action
    def GetSSHKey():

        Karbon.GetSSHKey(name="GetSSHKey")


class Create_Karbon_Cluster20231109(Blueprint):
    """Create Karbon Kubernetes Cluster using Karbon API.  The user can choose the following network interface: Flannel or Calico.  The user can also choose the type of Master Node: Single, Active-Passive, Active-Active with Load Balancer"""

    services = [Karbon]
    packages = [Package1, Package2, Package3, AHV_78]
    substrates = [Karbon_AHV, Karbon_AHV_2, Karbon_AHV_2_3]
    profiles = [SingleMaster, ActivePassiveMaster, ActiveActiveMaster]
    credentials = [
        BP_CRED_PE_Creds,
        BP_CRED_PC_Creds,
        BP_CRED_CENTOS,
        BP_CRED_Centos2Credential,
        BP_CRED_PE_SC_Creds,
        BP_CRED_CalmVM_Cred,
        BP_CRED_PE_SC_Creds2,
        BP_CRED_PE_SC_Creds3,
        BP_CRED_PE_SC_Creds4,
        BP_CRED_PE_SC_Creds5,
    ]
