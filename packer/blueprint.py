# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_CENTOS_KEY = read_local_file("BP_CRED_CENTOS_KEY")
BP_CRED_Centos2Credential_PASSWORD = read_local_file(
    "BP_CRED_Centos2Credential_PASSWORD"
)
BP_CRED_ROOT_PASSWORD = read_local_file("BP_CRED_ROOT_PASSWORD")

# Credentials
BP_CRED_CENTOS = basic_cred(
    "centos",
    BP_CRED_CENTOS_KEY,
    name="CENTOS",
    type="KEY",
    default=True,
)
BP_CRED_Centos2Credential = basic_cred(
    "centos",
    BP_CRED_Centos2Credential_PASSWORD,
    name="Centos 2 Credential",
    type="PASSWORD",
)
BP_CRED_ROOT = basic_cred(
    "root",
    BP_CRED_ROOT_PASSWORD,
    name="ROOT",
    type="PASSWORD",
)


class PackerSvc(Service):
    @action
    def InstallPacker(name="Install Packer"):

        CalmTask.Exec.ssh(
            name="Install Packer",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallPacker_Task_InstallPacker.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Verify Packer version",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallPacker_Task_VerifyPackerversion.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(PackerSvc),
        )

        PackerSvc.InstallPackerPlugins(name="Install Packer plugins")

    @action
    def InstallPrerequisites(name="Install Prerequisites"):

        CalmTask.Exec.ssh(
            name="Install BaseOS",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallPrerequisites_Task_InstallBaseOS.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Install Basic packages",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallPrerequisites_Task_InstallBasicpackages.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(PackerSvc),
        )

        PackerSvc.InstallGCC(name="Install latest gcc")

        PackerSvc.InstallOpenSSL(name="Install OpenSSL")

        PackerSvc.InstallPython3(name="Install Python3")

        PackerSvc.InstallAnsible(name="Install Ansible")

    @action
    def InstallOpenSSL(name="Install OpenSSL"):

        CalmTask.Exec.ssh(
            name="Install OpenSSL 3x prerequisites",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallOpenSSL_Task_InstallOpenSSL3xprerequisites.sh",
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Download OpenSSL",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallOpenSSL_Task_DownloadOpenSSL.sh",
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Configure",
            filename=os.path.join(
                "scripts", "Service_PackerSvc_Action_InstallOpenSSL_Task_Configure.sh"
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Make OpenSSL",
            filename=os.path.join(
                "scripts", "Service_PackerSvc_Action_InstallOpenSSL_Task_MakeOpenSSL.sh"
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Update Library Cache and Shell",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallOpenSSL_Task_UpdateLibraryCacheandShell.sh",
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Verify OpenSSL",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallOpenSSL_Task_VerifyOpenSSL.sh",
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

    @action
    def InstallPython3(name="Install Python3"):

        CalmTask.Exec.ssh(
            name="Install Python Prerequisites",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallPython3_Task_InstallPythonPrerequisites.sh",
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Download Python3",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallPython3_Task_DownloadPython3.sh",
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Complie Python source",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallPython3_Task_CompliePythonsource.sh",
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Configure latest Python to PATH",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallPython3_Task_ConfigurelatestPythontoPATH.sh",
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Verify Python Path",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallPython3_Task_VerifyPythonPath.sh",
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Install JQ",
            filename=os.path.join(
                "scripts", "Service_PackerSvc_Action_InstallPython3_Task_InstallJQ.sh"
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(PackerSvc),
        )

    @action
    def InstallGCC(name="Install GCC"):

        CalmTask.Exec.ssh(
            name="Remove old gcc",
            filename=os.path.join(
                "scripts", "Service_PackerSvc_Action_InstallGCC_Task_Removeoldgcc.sh"
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Install sclutils",
            filename=os.path.join(
                "scripts", "Service_PackerSvc_Action_InstallGCC_Task_Installsclutils.sh"
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Install devtoolset 11",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallGCC_Task_Installdevtoolset11.sh",
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Update gcc path",
            filename=os.path.join(
                "scripts", "Service_PackerSvc_Action_InstallGCC_Task_Updategccpath.sh"
            ),
            cred=ref(BP_CRED_ROOT),
            target=ref(PackerSvc),
        )

    @action
    def InstallAnsible(name="Install Ansible"):

        CalmTask.Exec.ssh(
            name="Install Ansible",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallAnsible_Task_InstallAnsible.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(PackerSvc),
        )

        CalmTask.Exec.ssh(
            name="Check Ansible version",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallAnsible_Task_CheckAnsibleversion.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(PackerSvc),
        )

    @action
    def InstallPackerPlugins(name="Install Packer Plugins"):

        CalmTask.Exec.ssh(
            name="Install plugins",
            filename=os.path.join(
                "scripts",
                "Service_PackerSvc_Action_InstallPackerPlugins_Task_Installplugins.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(PackerSvc),
        )


class vmcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 4
    vCPUs = 4
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "centos7-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("Primary_70", cluster="PHX-POC070")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join(
            "specs", "vmcalm_array_indexcalm_time_cloud_init_data.yaml"
        )
    )

    power_state = "ON"
    boot_type = "LEGACY"


class vmcalm_array_indexcalm_time(AhvVm):

    name = "vm-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = vmcalm_array_indexcalm_timeResources
    cluster = Ref.Cluster(name="PHX-POC070")


class PackerVM(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_70")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_array_indexcalm_time

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="0",
        credential=ref(BP_CRED_CENTOS),
    )


class Package1(Package):

    services = [ref(PackerSvc)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Uninstall openssl in CentOS",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_UninstallopensslinCentOS.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(PackerSvc),
        )

        PackerSvc.InstallPrerequisites(name="Install Prerequisites")

        PackerSvc.InstallPacker(name="Install Packer")


class _706cb4fe_deployment(Deployment):

    name = "706cb4fe_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(PackerVM)


class Default(Profile):

    deployments = [_706cb4fe_deployment]

    openssl_version = CalmVariable.Simple(
        "openssl-3.3.0",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    python_version = CalmVariable.Simple(
        "3.12.3",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )


class Packer(Blueprint):

    services = [PackerSvc]
    packages = [Package1]
    substrates = [PackerVM]
    profiles = [Default]
    credentials = [BP_CRED_CENTOS, BP_CRED_Centos2Credential, BP_CRED_ROOT]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
