# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_ROCKY_KEY = read_local_file("BP_CRED_ROCKY_KEY")
BP_CRED_DomainAdministrator_PASSWORD = read_local_file(
    "BP_CRED_DomainAdministrator_PASSWORD"
)
BP_CRED_ROCKY2Credential_PASSWORD = read_local_file("BP_CRED_ROCKY2Credential_PASSWORD")
BP_CRED_Harbor_PASSWORD = read_local_file("BP_CRED_Harbor_PASSWORD")

# Credentials
BP_CRED_ROCKY = basic_cred(
    "nutanix",
    BP_CRED_ROCKY_KEY,
    name="ROCKY",
    type="KEY",
    default=True,
)
BP_CRED_DomainAdministrator = basic_cred(
    "administrator@ntnxlab1.local",
    BP_CRED_DomainAdministrator_PASSWORD,
    name="Domain Administrator",
    type="PASSWORD",
)
BP_CRED_ROCKY2Credential = basic_cred(
    "nutanix",
    BP_CRED_ROCKY2Credential_PASSWORD,
    name="ROCKY 2 Credential",
    type="PASSWORD",
)
BP_CRED_Harbor = basic_cred(
    "admin",
    BP_CRED_Harbor_PASSWORD,
    name="Harbor",
    type="PASSWORD",
)


class Rocky(Service):
    @action
    def __delete__():
        """System action for deleting an application. Deletes created VMs as well"""

        Rocky.UnjoinADDomain(name="Unjoin AD Domain")

    @action
    def JoinADDomain(name="Join AD Domain"):

        CalmTask.Exec.ssh(
            name="Installed OS Packages",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_JoinADDomain_Task_InstalledOSPackages.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Join DNS",
            filename=os.path.join(
                "scripts", "Service_Rocky_Action_JoinADDomain_Task_JoinDNS.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        Rocky.ADPrerequisites(name="Validate Prerequisites")

        CalmTask.Exec.ssh(
            name="Join AD Domain",
            filename=os.path.join(
                "scripts", "Service_Rocky_Action_JoinADDomain_Task_JoinADDomain.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

    @action
    def UnjoinADDomain(name="Unjoin AD Domain"):

        CalmTask.Exec.ssh(
            name="Unjoin AD Domain",
            filename=os.path.join(
                "scripts", "Service_Rocky_Action_UnjoinADDomain_Task_UnjoinADDomain.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

    @action
    def ADPrerequisites(name="AD Prerequisites"):

        CalmTask.Exec.ssh(
            name="Validate DNS Lookup",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_ADPrerequisites_Task_ValidateDNSLookup.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Validate connection to AD",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_ADPrerequisites_Task_ValidateconnectiontoAD.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Synchronize time with AD",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_ADPrerequisites_Task_SynchronizetimewithAD.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

    @action
    def HarborPrerequisites(name="Harbor Prerequisites"):

        CalmTask.Exec.ssh(
            name="Install Docker",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_HarborPrerequisites_Task_InstallDocker.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Install OpenSSL",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_HarborPrerequisites_Task_InstallOpenSSL.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Generate SSL Certificate",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_HarborPrerequisites_Task_GenerateSSLCertificate.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

    @action
    def StoragePrerequisites(name="Storage Prerequisites"):

        CalmTask.Exec.ssh(
            name="Current Disk Information",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_StoragePrerequisites_Task_CurrentDiskInformation.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Configure to use 2nd disk",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_StoragePrerequisites_Task_Configuretouse2nddisk.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Mount the drive",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_StoragePrerequisites_Task_Mountthedrive.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Configure fstab",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_StoragePrerequisites_Task_Configurefstab.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Verify fstab mount",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_StoragePrerequisites_Task_Verifyfstabmount.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        Rocky.__restart__(name="Restart the VM")

        CalmTask.Exec.ssh(
            name="Verify Mount information",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_StoragePrerequisites_Task_VerifyMountinformation.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

    @action
    def InstallHarbor(name="Install Harbor"):

        CalmTask.Exec.ssh(
            name="Download Harbor Binary",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_InstallHarbor_Task_DownloadHarborBinary.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Install Harbor",
            filename=os.path.join(
                "scripts", "Service_Rocky_Action_InstallHarbor_Task_InstallHarbor.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Verify Installation",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_InstallHarbor_Task_VerifyInstallation.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )


class rcalm_timeResources(AhvVmResources):

    memory = 16
    vCPUs = 4
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "rocky94-calm-template.qcow2", bootable=True
        ),
        AhvVmDisk.Disk.Scsi.allocateOnStorageContainer(5000),
    ]
    nics = [AhvVmNic.NormalNic.ingress("Calm_Secondary_OTC", cluster="DM3-POC088")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "rcalm_time_cloud_init_data.yaml")
    )

    power_state = "ON"


class rcalm_time(AhvVm):

    name = "r@@{calm_time}@@"
    resources = rcalm_timeResources
    cluster = Ref.Cluster(name="DM3-POC088")
    categories = {"AppType": "Default"}


class Rocky_VM(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_OTC")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = rcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "Rocky_VM_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_ROCKY),
    )


class UpdateVMSpec_Update_ConfigAttrsdf572fd7(AhvUpdateConfigAttrs):

    memory = PatchField.Ahv.memory(
        value="2", operation="equal", max_val=4, min_val=2, editable=True
    )
    vcpu = PatchField.Ahv.vcpu(value="1", operation="equal", editable=False)
    numsocket = PatchField.Ahv.numsocket(
        value="2", operation="equal", max_val=4, min_val=2, editable=True
    )

    disks = [
        PatchField.Ahv.Disks.modify(
            index=0, editable=False, operation="equal", value="0"
        ),
        PatchField.Ahv.Disks.add(AhvVmDisk.Disk.Scsi.allocateOnStorageContainer(100)),
    ]


class Package1(Package):

    services = [ref(Rocky)]

    @action
    def __install__():

        Rocky.StoragePrerequisites(name="Mount Disk")

        Rocky.JoinADDomain(name="Join AD Domain")

        Rocky.HarborPrerequisites(name="Install Harbor Prerequisites")

        Rocky.InstallHarbor(name="Install Harbor")


class b1a5673a_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(Rocky_VM)


class Default(Profile):

    deployments = [b1a5673a_deployment]
    patch_list = [
        AppEdit.UpdateConfig(
            name="Update VM Spec",
            target=ref(b1a5673a_deployment),
            patch_attrs=UpdateVMSpec_Update_ConfigAttrsdf572fd7,
        )
    ]

    domain_name = CalmVariable.Simple(
        "ntnxlab1.local",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    Domain_Server_IP = CalmVariable.Simple(
        "10.55.88.59",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    Domain_Server = CalmVariable.Simple(
        "WIN-2U3E71T1COI",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )


class Harbor(Blueprint):

    services = [Rocky]
    packages = [Package1]
    substrates = [Rocky_VM]
    profiles = [Default]
    credentials = [
        BP_CRED_ROCKY,
        BP_CRED_DomainAdministrator,
        BP_CRED_ROCKY2Credential,
        BP_CRED_Harbor,
    ]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
