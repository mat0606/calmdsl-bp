# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import CalmTask as CalmVarTask
from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_UbuntuCredential_PASSWORD = read_local_file("BP_CRED_UbuntuCredential_PASSWORD")
BP_CRED_DomainAdministrator_PASSWORD = read_local_file(
    "BP_CRED_DomainAdministrator_PASSWORD"
)

# Credentials
BP_CRED_UbuntuCredential = basic_cred(
    "nutanix",
    BP_CRED_UbuntuCredential_PASSWORD,
    name="Ubuntu Credential",
    type="PASSWORD",
    default=True,
    editables={"username": True, "secret": True},
)
BP_CRED_DomainAdministrator = basic_cred(
    "ADMINISTRATOR@NTNXLAB1.LOCAL",
    BP_CRED_DomainAdministrator_PASSWORD,
    name="Domain Administrator",
    type="PASSWORD",
)


class Ubuntu(Service):
    @action
    def JoinADDomain(
        name="Join AD Domain",
    ):

        CalmTask.Exec.ssh(
            name="Update Installed OS Packages",
            filename=os.path.join(
                "scripts",
                "Service_Ubuntu_Action_JoinADDomain_Task_UpdateInstalledOSPackages.sh",
            ),
            cred=ref(BP_CRED_UbuntuCredential),
            target=ref(Ubuntu),
        )

        CalmTask.Delay(name="Delay for reboot", delay_seconds=60, target=ref(Ubuntu))

        CalmTask.Exec.ssh(
            name="Remove old packages",
            filename=os.path.join(
                "scripts",
                "Service_Ubuntu_Action_JoinADDomain_Task_Removeoldpackages.sh",
            ),
            cred=ref(BP_CRED_UbuntuCredential),
            target=ref(Ubuntu),
        )

        CalmTask.Exec.ssh(
            name="Join DNS",
            filename=os.path.join(
                "scripts", "Service_Ubuntu_Action_JoinADDomain_Task_JoinDNS.sh"
            ),
            cred=ref(BP_CRED_UbuntuCredential),
            target=ref(Ubuntu),
        )

        CalmTask.Exec.ssh(
            name="Configure Package",
            filename=os.path.join(
                "scripts", "Service_Ubuntu_Action_JoinADDomain_Task_ConfigurePackage.sh"
            ),
            cred=ref(BP_CRED_UbuntuCredential),
            target=ref(Ubuntu),
        )

        CalmTask.Exec.ssh(
            name="Join AD Domain",
            filename=os.path.join(
                "scripts", "Service_Ubuntu_Action_JoinADDomain_Task_JoinADDomain.sh"
            ),
            target=ref(Ubuntu),
        )

    @action
    def UnjoinADDomain(
        name="Unjoin AD Domain",
    ):

        CalmTask.Exec.ssh(
            name="Unjoin AD Domain",
            filename=os.path.join(
                "scripts", "Service_Ubuntu_Action_UnjoinADDomain_Task_UnjoinADDomain.sh"
            ),
            cred=ref(BP_CRED_UbuntuCredential),
            target=ref(Ubuntu),
        )


class mcalm_timeResources(AhvVmResources):

    memory = 4
    vCPUs = 1
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "ubuntu-2404-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("Calm_Primary_ITC", cluster="PHX-POC155")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "mcalm_time_cloud_init_data.yaml")
    )

    power_state = "ON"


class mcalm_time(AhvVm):

    name = "m@@{calm_time}@@"
    resources = mcalm_timeResources
    cluster = Ref.Cluster(name="PHX-POC155")
    categories = {"Owner": "Matthew"}


class UbuntuVM(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_ITC")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = mcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "UbuntuVM_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="10",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_UbuntuCredential),
    )


class JenkinsMasterPackage(Package):

    services = [ref(Ubuntu)]

    @action
    def __install__(type="system"):

        Ubuntu.JoinADDomain(name="Join AD Domain")

    @action
    def __uninstall__(type="system"):

        Ubuntu.UnjoinADDomain(name="Unjoin AD Domain")


class _1afa7711_deployment(Deployment):

    name = "1afa7711_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(JenkinsMasterPackage)]
    substrate = ref(UbuntuVM)


class Default(Profile):

    deployments = [_1afa7711_deployment]

    domain_name = CalmVariable.Simple(
        "NTNXLAB1.LOCAL",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    Domain_Server_IP = CalmVariable.Simple(
        "10.55.88.59",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    Domain_Server = CalmVariable.Simple(
        "WIN-2U3E71T1COI",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )


class Ubuntu20231124(Blueprint):

    services = [Ubuntu]
    packages = [JenkinsMasterPackage]
    substrates = [UbuntuVM]
    profiles = [Default]
    credentials = [BP_CRED_UbuntuCredential, BP_CRED_DomainAdministrator]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
