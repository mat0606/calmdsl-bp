# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_PC_Creds_PASSWORD = read_local_file("BP_CRED_PC_Creds_PASSWORD")
BP_CRED_CENTOS_KEY = read_local_file("BP_CRED_CENTOS_KEY")
BP_CRED_Centos2Credential_PASSWORD = read_local_file(
    "BP_CRED_Centos2Credential_PASSWORD"
)
BP_CRED_CalmVM_Cred_PASSWORD = read_local_file("BP_CRED_CalmVM_Cred_PASSWORD")
BP_CRED_mysql_password_PASSWORD = read_local_file("BP_CRED_mysql_password_PASSWORD")

# Credentials
BP_CRED_PC_Creds = basic_cred(
    "admin",
    BP_CRED_PC_Creds_PASSWORD,
    name="PC_Creds",
    type="PASSWORD",
    default=True,
)
BP_CRED_CENTOS = basic_cred(
    "centos",
    BP_CRED_CENTOS_KEY,
    name="CENTOS",
    type="KEY",
)
BP_CRED_Centos2Credential = basic_cred(
    "centos",
    BP_CRED_Centos2Credential_PASSWORD,
    name="Centos 2 Credential",
    type="PASSWORD",
)
BP_CRED_CalmVM_Cred = basic_cred(
    "admin",
    BP_CRED_CalmVM_Cred_PASSWORD,
    name="CalmVM_Cred",
    type="PASSWORD",
)
BP_CRED_mysql_password = basic_cred(
    "mysql",
    BP_CRED_mysql_password_PASSWORD,
    name="mysql_password",
    type="PASSWORD",
)


AHV_78 = vm_disk_package(
    name="AHV_78",
    description="",
    config={
        "name": "AHV_78",
        "image": {
            "name": "AHV_78",
            "type": "DISK_IMAGE",
            "source": "http://download.nutanix.com/Calm/CentOS-7-x86_64-2003.qcow2",
            "architecture": "X86_64",
        },
        "product": {"name": "AHV", "version": "7_8"},
        "checksum": {},
    },
)


class KubectlClient(Service):

    task_uuid = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    SUBNET_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    PE_Cluster_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_kubeconfig = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_server = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_ca = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_token = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    username = CalmVariable.Simple(
        "",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="ssh username",
    )

    private_key = CalmVariable.Simple.multiline(
        "",
        label="",
        regex="^(.|\\n)*$",
        validate_regex=False,
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="ssh certificate private key",
    )

    certificate = CalmVariable.Simple(
        "",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="ssh certificate",
    )

    centos_pub_key = CalmVariable.Simple(
        "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAii7qFDhVadLx5lULAG/ooCUTA/ATSmXbArs+GdHxbUWd/bNGZCXnaQ2L1mSVVGDxfTbSaTJ3En3tVlMtD2RjZPdhqWESCaoj2kXLYSiNDS9qz3SK6h822je/f9O9CzCTrw2XGhnDVwmNraUvO5wmQObCDthTXc72PcBOd6oa4ENsnuY9HtiETg29TZXgCYPFXipLBHSZYkBmGgccAeY9dq5ywiywBJLuoSovXkkRJk3cd7GyhCRIwYzqfdgSmiAMYgJLrz/UuLxatPqXts2D8v1xqR9EPNZNzgd4QHK4of1lqsNRuz2SxkwqLcXSw0mGcAL8mIwVpzhPzwmENC5Orw== rsa-key-20190108",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    @action
    def __delete__():
        """System action for deleting an application. Deletes created VMs as well"""

        KubectlClient.DeleteApp(name="Delete App")

    @action
    def DeployApp(name="Deploy App"):

        CalmTask.Exec.ssh(
            name="Deploy DB",
            filename=os.path.join(
                "scripts", "Service_KubectlClient_Action_DeployApp_Task_DeployDB.sh"
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(KubectlClient),
        )

    @action
    def DeleteApp(name="Delete App"):

        CalmTask.Exec.ssh(
            name="Delete DB",
            filename=os.path.join(
                "scripts", "Service_KubectlClient_Action_DeleteApp_Task_DeleteDB.sh"
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(KubectlClient),
        )


class Centos_Client(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "Centos_Client_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class Package1(Package):

    services = [ref(KubectlClient)]

    @action
    def __install__():

        KubectlClient.DeleteApp(name="Delete previous deployment")

        KubectlClient.DeployApp(name="Deploy App")


class _75513331_deployment(Deployment):

    name = "75513331_deployment"
    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(Centos_Client)


class Default(Profile):

    deployments = [_75513331_deployment]

    PC_IP = CalmVariable.Simple(
        "10.42.70.39",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    CalmVM_IP = CalmVariable.Simple(
        "10.42.70.50",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="CalmVM_IP is used to capture the Calm VM IP.  If Calm is in the same PC, CalmVM_IP value will be the same as PC_IP",
    )

    build_number = CalmVariable.Simple(
        "",
        label="",
        regex="^.*$",
        validate_regex=False,
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    project_name = CalmVariable.Simple(
        "devops",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    docker_port = CalmVariable.Simple.int(
        "18090",
        label="",
        regex="^[\\d]*$",
        validate_regex=False,
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    docker_registry = CalmVariable.Simple(
        "n230306-035703.ntnxlab.local",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    cluster_name = CalmVariable.Simple(
        "mo-dev",
        label="Please key in the Kubernetes Cluster Name",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )


class CD_Blueprint(Blueprint):
    """Create Karbon Kubernetes Cluster using Karbon API.  The user can choose the following network interface: Flannel or Calico.  The user can also choose the type of Master Node: Single, Active-Passive, Active-Active with Load Balancer"""

    services = [KubectlClient]
    packages = [Package1, AHV_78]
    substrates = [Centos_Client]
    profiles = [Default]
    credentials = [
        BP_CRED_PC_Creds,
        BP_CRED_CENTOS,
        BP_CRED_Centos2Credential,
        BP_CRED_CalmVM_Cred,
        BP_CRED_mysql_password,
    ]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
