# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import CalmTask as CalmVarTask
from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_ROCKY2Credential_PASSWORD = read_local_file("BP_CRED_ROCKY2Credential_PASSWORD")
BP_CRED_ROCKY_KEY = read_local_file("BP_CRED_ROCKY_KEY")
BP_CRED_RancherCredential_PASSWORD = read_local_file(
    "BP_CRED_RancherCredential_PASSWORD"
)

# Credentials
BP_CRED_ROCKY2Credential = basic_cred(
    "nutanix",
    BP_CRED_ROCKY2Credential_PASSWORD,
    name="ROCKY 2 Credential",
    type="PASSWORD",
    editables={"username": True, "secret": True},
)
BP_CRED_ROCKY = basic_cred(
    "nutanix",
    BP_CRED_ROCKY_KEY,
    name="ROCKY",
    type="KEY",
    default=True,
    editables={"username": True, "secret": True},
)
BP_CRED_RancherCredential = basic_cred(
    "admin",
    BP_CRED_RancherCredential_PASSWORD,
    name="Rancher Credential",
    type="PASSWORD",
    editables={"username": True, "secret": True},
)


class rancher_service(Service):

    src_kubeconfig = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_server = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_ca = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_token = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def InstallRancher(
        name="Install Rancher",
    ):

        CalmTask.Exec.ssh(
            name="Create Namespace",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_InstallRancher_Task_CreateNamespace.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(rancher_service),
        )

        rancher_service.InstallCertManager(name="Install CertManager")

        CalmTask.Exec.ssh(
            name="Install Rancher",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_InstallRancher_Task_InstallRancher.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(rancher_service),
        )

        CalmTask.Delay(
            name="Sleep for 60 seconds", delay_seconds=60, target=ref(rancher_service)
        )

        CalmTask.Exec.ssh(
            name="Verify Rancher installation",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_InstallRancher_Task_VerifyRancherinstallation.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(rancher_service),
        )

        CalmTask.Exec.ssh(
            name="Get Bootstrap Password",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_InstallRancher_Task_GetBootstrapPassword.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(rancher_service),
        )

    @action
    def InstallCertManager(
        name="Install CertManager",
    ):

        CalmTask.Exec.ssh(
            name="Install CertManager",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_InstallCertManager_Task_InstallCertManager.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(rancher_service),
        )

        CalmTask.Exec.ssh(
            name="Verify CertManager",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_InstallCertManager_Task_VerifyCertManager.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(rancher_service),
        )

    @action
    def UninstallRancher(
        name="Uninstall Rancher",
    ):

        CalmTask.Exec.ssh(
            name="Uninstall Rancher",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_UninstallRancher_Task_UninstallRancher.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(rancher_service),
        )

        CalmTask.Exec.ssh(
            name="Uninstall CertManager",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_UninstallRancher_Task_UninstallCertManager.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(rancher_service),
        )


class rancher_vm(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "rancher_vm_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
        credential=ref(BP_CRED_ROCKY),
    )


class Package4(Package):

    services = [ref(rancher_service)]

    @action
    def __install__(type="system"):

        rancher_service.InstallRancher(name="Install Rancher")

    @action
    def __uninstall__(type="system"):

        rancher_service.UninstallRancher(name="Uninstall Rancher")


class d8a66e6a_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package4)]
    substrate = ref(rancher_vm)


class Default(Profile):

    deployments = [d8a66e6a_deployment]

    domain_name = CalmVariable.Simple(
        "ntnxlab1.local",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    rancher_helm_chart_repo = CalmVariable.Simple(
        "stable",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    cert_manager_version = CalmVariable.Simple(
        "v1.17.1",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    nkp_kubeconfig = CalmVariable.Simple(
        "nkp2-13-1-mo-prd2-workload-cluster1-kubeconfig.yaml",
        label="Please enter the NKP workload cluster kubeconfig",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    nkp_bootstrap_vm_ip = CalmVariable.Simple(
        "10.42.155.92",
        label="Please enter the NKP Bootstrap VM IP",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )


class InstallRancherintoNKP(Blueprint):
    """This blueprint will install Rancher into the NKP workload cluster.  This blueprint assumes the following are available in the NKP bootstrap VM.

    1.  .ssh id_rsa, id_rsa.pub and authorized_keys set for nutanix user in NKP bootstrap VM
    2.  Kubectl client installed
    2.  Helm client installed

    This blueprint will also provision the latest certmanager


    """

    services = [rancher_service]
    packages = [Package4]
    substrates = [rancher_vm]
    profiles = [Default]
    credentials = [BP_CRED_ROCKY2Credential, BP_CRED_ROCKY, BP_CRED_RancherCredential]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
