# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_db_server_creds_KEY = read_local_file("BP_CRED_db_server_creds_KEY")
BP_CRED_CENTOS_KEY = read_local_file("BP_CRED_CENTOS_KEY")
BP_CRED_era_server_creds_PASSWORD = read_local_file("BP_CRED_era_server_creds_PASSWORD")
BP_CRED_PCCredential_PASSWORD = read_local_file("BP_CRED_PCCredential_PASSWORD")
BP_CRED_postgres_db_creds_PASSWORD = read_local_file(
    "BP_CRED_postgres_db_creds_PASSWORD"
)

# Credentials
BP_CRED_db_server_creds = basic_cred(
    "era",
    BP_CRED_db_server_creds_KEY,
    name="db_server_creds",
    type="KEY",
    default=True,
)
BP_CRED_CENTOS = basic_cred(
    "centos",
    BP_CRED_CENTOS_KEY,
    name="CENTOS",
    type="KEY",
)
BP_CRED_era_server_creds = basic_cred(
    "admin",
    BP_CRED_era_server_creds_PASSWORD,
    name="era_server_creds",
    type="PASSWORD",
)
BP_CRED_PCCredential = basic_cred(
    "admin",
    BP_CRED_PCCredential_PASSWORD,
    name="PC Credential",
    type="PASSWORD",
)
BP_CRED_postgres_db_creds = basic_cred(
    "postgres",
    BP_CRED_postgres_db_creds_PASSWORD,
    name="postgres_db_creds",
    type="PASSWORD",
)


class Flow(Service):
    @action
    def CreateCategory(name="Create Category"):

        CalmTask.Exec.escript.py2(
            name="Create Category Value",
            filename=os.path.join(
                "scripts",
                "Service_Flow_Action_CreateCategory_Task_CreateCategoryValue.py",
            ),
            target=ref(Flow),
        )

    @action
    def CreateSecurityPolicy(name="Create Security Policy"):

        CalmTask.SetVariable.escript.py2(
            name="Create Flow Security Policy",
            filename=os.path.join(
                "scripts",
                "Service_Flow_Action_CreateSecurityPolicy_Task_CreateFlowSecurityPolicy.py",
            ),
            target=ref(Flow),
            variables=["policy_uuid_1"],
        )

    @action
    def DeleteSecurityPolicy(name="Delete Security Policy"):

        CalmTask.Exec.escript.py2(
            name="Delete Flow Security Policy",
            filename=os.path.join(
                "scripts",
                "Service_Flow_Action_DeleteSecurityPolicy_Task_DeleteFlowSecurityPolicy.py",
            ),
            target=ref(Flow),
        )

    @action
    def DeleteCategory(name="Delete Category"):

        CalmTask.Exec.escript.py2(
            name="Delete Category Value",
            filename=os.path.join(
                "scripts",
                "Service_Flow_Action_DeleteCategory_Task_DeleteCategoryValue.py",
            ),
            target=ref(Flow),
        )


class Era_PostgreSQL_DB(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "Era_PostgreSQL_DB_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
        credential=ref(BP_CRED_db_server_creds),
    )


class EraServer(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "EraServer_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
        credential=ref(BP_CRED_era_server_creds),
    )


class FlowIngegration(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "FlowIngegration_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class Postgres(Service):

    dependencies = [ref(Flow)]

    UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def __create__():
        """System action for creating an application"""

        Postgres.AddCategory(name="Add Category")

    @action
    def AddCategory(name="Add Category"):

        CalmTask.Exec.escript.py2(
            name="Add Category Value",
            filename=os.path.join(
                "scripts",
                "Service_Postgres_Action_AddCategory_Task_AddCategoryValue.py",
            ),
            target=ref(Postgres),
        )


class Era(Service):

    dependencies = [ref(Flow)]

    CLEANUP_OPERATION_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    CLUSTER_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    COMPUTE_PROF_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    CREATE_OPERATION_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_ENTITY_NAME = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_PARAM_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_SERVER_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_SERVER_IP = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DEREGISTER_OPERATION_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    NETWORK_PROF_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    SLA_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    SOFTWARE_PROF_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_SERVER_NAME = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_SERVER_VM_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def __delete__():
        """System action for deleting an application. Deletes created VMs as well"""

        Era.DeleteCategory(name="Delete Category")

    @action
    def DeleteCategory(name="Delete Category"):

        CalmTask.Exec.escript.py2(
            name="Delete Category Value",
            filename=os.path.join(
                "scripts",
                "Service_Era_Action_DeleteCategory_Task_DeleteCategoryValue.py",
            ),
            target=ref(Era),
        )


class Package3(Package):

    services = [ref(Flow)]

    @action
    def __install__():

        Flow.CreateCategory(name="Create Category")

        Flow.CreateSecurityPolicy(name="Create Security Policy")

    @action
    def __uninstall__():

        Flow.DeleteSecurityPolicy(name="Delete Security Policy")

        Flow.DeleteCategory(name="Delete Category")


class Package1(Package):

    services = [ref(Postgres)]


class Package2(Package):

    services = [ref(Era)]

    @action
    def __install__():

        CalmTask.SetVariable.escript.py2(
            name="GetClusterID",
            filename=os.path.join(
                "scripts", "Package_Package2_Action___install___Task_GetClusterID.py"
            ),
            target=ref(Era),
            variables=["CLUSTER_ID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="GetProfileIDs",
            filename=os.path.join(
                "scripts", "Package_Package2_Action___install___Task_GetProfileIDs.py"
            ),
            target=ref(Era),
            variables=[
                "COMPUTE_PROF_ID",
                "DB_PARAM_ID",
                "NETWORK_PROF_ID",
                "SOFTWARE_PROF_ID",
            ],
        )

        CalmTask.SetVariable.escript.py2(
            name="GetSLAID",
            filename=os.path.join(
                "scripts", "Package_Package2_Action___install___Task_GetSLAID.py"
            ),
            target=ref(Era),
            variables=["SLA_ID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="ProvisionDB",
            filename=os.path.join(
                "scripts", "Package_Package2_Action___install___Task_ProvisionDB.py"
            ),
            target=ref(Era),
            variables=["CREATE_OPERATION_ID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="MonitorOperation",
            filename=os.path.join(
                "scripts",
                "Package_Package2_Action___install___Task_MonitorOperation.py",
            ),
            target=ref(Era),
            variables=["DB_ENTITY_NAME"],
        )

        CalmTask.SetVariable.escript.py2(
            name="GetDatabaseInfo",
            filename=os.path.join(
                "scripts", "Package_Package2_Action___install___Task_GetDatabaseInfo.py"
            ),
            target=ref(Era),
            variables=[
                "DB_ID",
                "DB_SERVER_ID",
                "DB_SERVER_IP",
                "DB_SERVER_NAME",
                "DB_SERVER_VM_UUID",
            ],
        )

    @action
    def __uninstall__():

        CalmTask.SetVariable.escript.py2(
            name="CleanupDB",
            filename=os.path.join(
                "scripts", "Package_Package2_Action___uninstall___Task_CleanupDB.py"
            ),
            target=ref(Era),
            variables=["CLEANUP_OPERATION_ID"],
        )

        CalmTask.Exec.escript.py2(
            name="MonitorCleanupOp",
            filename=os.path.join(
                "scripts",
                "Package_Package2_Action___uninstall___Task_MonitorCleanupOp.py",
            ),
            target=ref(Era),
        )

        CalmTask.SetVariable.escript.py2(
            name="DeregisterDBServer",
            filename=os.path.join(
                "scripts",
                "Package_Package2_Action___uninstall___Task_DeregisterDBServer.py",
            ),
            target=ref(Era),
            variables=["DEREGISTER_OPERATION_ID"],
        )

        CalmTask.Exec.escript.py2(
            name="MonitorDeregOp",
            filename=os.path.join(
                "scripts",
                "Package_Package2_Action___uninstall___Task_MonitorDeregOp.py",
            ),
            target=ref(Era),
        )


class _696b9b6f_deployment(Deployment):

    name = "696b9b6f_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package3)]
    substrate = ref(FlowIngegration)


class _9e1ae172_deployment(Deployment):

    name = "9e1ae172_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(Era_PostgreSQL_DB)


class _0c9d81fc_deployment(Deployment):

    name = "0c9d81fc_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package2)]
    substrate = ref(EraServer)


class Default(Profile):

    deployments = [_9e1ae172_deployment, _0c9d81fc_deployment, _696b9b6f_deployment]

    compute_profile = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_compute_profile_Task_SampleTask.py"
            ),
        ),
        label="Please select the Compute Profile",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    database_parameter = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_Default_variable_database_parameter_Task_SampleTask.py",
            ),
        ),
        label="Please select the database parameter",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    software_profile = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_Default_variable_software_profile_Task_SampleTask.py",
            ),
        ),
        label="Please select the Software Profile",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    network_profile = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_network_profile_Task_SampleTask.py"
            ),
        ),
        label="Please select the Network Profile",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    db_name = CalmVariable.Simple(
        'oscar_django_@@{calm_time("%Y%m%d%H%M")}@@',
        label="Please key in the database name",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    sla_name = CalmVariable.Simple(
        "DEFAULT_OOB_BRASS_SLA",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    download_host = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=True, runtime=False, description=""
    )

    download_port = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=True, runtime=False, description=""
    )

    pc_ip = CalmVariable.Simple(
        "10.42.71.39",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    era_ip = CalmVariable.Simple(
        "10.42.71.60",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )


class NDBPostgres20240219(Blueprint):
    """Provision a Postgres database through NDB 2.5.3.1"""

    services = [Postgres, Era, Flow]
    packages = [Package1, Package2, Package3]
    substrates = [Era_PostgreSQL_DB, EraServer, FlowIngegration]
    profiles = [Default]
    credentials = [
        BP_CRED_db_server_creds,
        BP_CRED_CENTOS,
        BP_CRED_era_server_creds,
        BP_CRED_PCCredential,
        BP_CRED_postgres_db_creds,
    ]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
