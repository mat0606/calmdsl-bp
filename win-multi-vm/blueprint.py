# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_WIN_VM_CRED_PASSWORD = read_local_file("BP_CRED_WIN_VM_CRED_PASSWORD")
BP_CRED_DOMAIN_CRED_PASSWORD = read_local_file("BP_CRED_DOMAIN_CRED_PASSWORD")

# Credentials
BP_CRED_WIN_VM_CRED = basic_cred(
    "administrator",
    BP_CRED_WIN_VM_CRED_PASSWORD,
    name="WIN_VM_CRED",
    type="PASSWORD",
    default=True,
    editables={"username": True, "secret": True},
)
BP_CRED_DOMAIN_CRED = basic_cred(
    "administrator@ntnxlab1.local",
    BP_CRED_DOMAIN_CRED_PASSWORD,
    name="DOMAIN_CRED",
    type="PASSWORD",
    editables={"username": True, "secret": True},
)


class Windows(Service):
    @action
    def JoinADDomain(name="Join AD Domain"):

        CalmTask.Exec.powershell(
            name="Set Host Name",
            filename=os.path.join(
                "scripts", "Service_Windows_Action_JoinADDomain_Task_SetHostName.ps1"
            ),
            cred=ref(BP_CRED_WIN_VM_CRED),
            target=ref(Windows),
        )

        Windows.__restart__(name="Restart the VM")

        CalmTask.Exec.powershell(
            name="Join AD Domain",
            filename=os.path.join(
                "scripts", "Service_Windows_Action_JoinADDomain_Task_JoinADDomain.ps1"
            ),
            cred=ref(BP_CRED_WIN_VM_CRED),
            target=ref(Windows),
        )

    @action
    def UnjoinADDomain(name="Unjoin AD Domain"):

        CalmTask.Exec.powershell(
            name="Unjoin AD Domain",
            filename=os.path.join(
                "scripts",
                "Service_Windows_Action_UnjoinADDomain_Task_UnjoinADDomain.ps1",
            ),
            cred=ref(BP_CRED_WIN_VM_CRED),
            target=ref(Windows),
        )

        Windows.__restart__(name="Restart the VM")


class Wcalm_timeResources(AhvVmResources):

    memory = 2
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "windows-2022-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("Calm_Secondary_OTC", cluster="DM3-POC088")]

    guest_customization = AhvVmGC.Sysprep.PreparedScript.withoutDomain(
        filename=os.path.join("specs", "Wcalm_time_sysprep_unattend_xml.xml")
    )

    power_state = "ON"
    boot_type = "LEGACY"


class Wcalm_time(AhvVm):

    name = " W@@{calm_time}@@"
    resources = Wcalm_timeResources
    cluster = Ref.Cluster(name="DM3-POC088")


class WindowsAD(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_OTC")
    os_type = "Windows"
    provider_type = "AHV_VM"
    provider_spec = Wcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "WindowsAD_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="POWERSHELL",
        disabled=False,
        retries="5",
        connection_port=5985,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="0",
        credential=ref(BP_CRED_WIN_VM_CRED),
    )


class Wcalm_timeResources(AhvVmResources):

    memory = 4
    vCPUs = 4
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "windows-2022-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("Calm_Secondary_OTC", cluster="DM3-POC088")]

    guest_customization = AhvVmGC.Sysprep.PreparedScript.withoutDomain(
        filename=os.path.join("specs", "Wcalm_time_sysprep_unattend_xml.xml")
    )

    power_state = "ON"
    boot_type = "LEGACY"


class Wcalm_time(AhvVm):

    name = "W@@{calm_time}@@"
    resources = Wcalm_timeResources
    cluster = Ref.Cluster(name="DM3-POC088")


class WindowsAD_2(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_OTC")
    os_type = "Windows"
    provider_type = "AHV_VM"
    provider_spec = Wcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "WindowsAD_2_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="POWERSHELL",
        disabled=False,
        retries="5",
        connection_port=5985,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="0",
        credential=ref(BP_CRED_WIN_VM_CRED),
    )


class vmcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 8
    vCPUs = 6
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "windows-2022-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("Calm_Secondary_OTC", cluster="DM3-POC088")]

    guest_customization = AhvVmGC.Sysprep.PreparedScript.withoutDomain(
        filename=os.path.join(
            "specs", "vmcalm_array_indexcalm_time_sysprep_unattend_xml.xml"
        )
    )

    power_state = "ON"
    boot_type = "LEGACY"


class vmcalm_array_indexcalm_time(AhvVm):

    name = "vm-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = vmcalm_array_indexcalm_timeResources
    cluster = Ref.Cluster(name="DM3-POC088")


class WindowsAD_2_3(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_OTC")
    os_type = "Windows"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_array_indexcalm_time

    readiness_probe = readiness_probe(
        connection_type="POWERSHELL",
        disabled=False,
        retries="5",
        connection_port=5985,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="0",
        credential=ref(BP_CRED_WIN_VM_CRED),
    )


class ChangeVMSpecification_Update_ConfigAttrsbd9c5422(AhvUpdateConfigAttrs):

    memory = PatchField.Ahv.memory(
        value="2", operation="equal", max_val=8, min_val=2, editable=True
    )
    vcpu = PatchField.Ahv.vcpu(
        value="1", operation="equal", max_val=2, min_val=1, editable=True
    )
    numsocket = PatchField.Ahv.numsocket(
        value="2", operation="equal", max_val=8, min_val=2, editable=True
    )

    disks = [
        PatchField.Ahv.Disks.modify(
            index=0, editable=False, operation="equal", value="200"
        )
    ]


class Package1(Package):

    services = [ref(Windows)]

    @action
    def __install__():

        Windows.JoinADDomain(name="Join AD Domain")

    @action
    def __uninstall__():

        Windows.UnjoinADDomain(name="Unjoin AD Domain")


class PackageMedium(Package):

    services = [ref(Windows)]

    @action
    def __install__():

        Windows.JoinADDomain(name="Join AD Domain")

    @action
    def __uninstall__():

        Windows.UnjoinADDomain(name="Unjoin AD Domain")


class Package3(Package):

    services = [ref(Windows)]


class deployment_725e7736(Deployment):

    min_replicas = "1"
    max_replicas = "3"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(WindowsAD)


class deployment_a4f877c2(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(PackageMedium)]
    substrate = ref(WindowsAD_2)


class deployment_17d92f43(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package3)]
    substrate = ref(WindowsAD_2_3)


class Small(Profile):

    deployments = [deployment_725e7736]
    patch_list = [
        AppEdit.UpdateConfig(
            name="Change VM Specification",
            target=ref(deployment_725e7736),
            patch_attrs=ChangeVMSpecification_Update_ConfigAttrsbd9c5422,
        )
    ]
    restore_configs = [
        AppProtection.RestoreConfig.Ahv(
            name="Restore_Configvm_snapshot",
            target=ref(deployment_725e7736),
            delete_vm_post_restore=True,
        )
    ]
    snapshot_configs = [
        AppProtection.SnapshotConfig.Ahv(
            name="Snapshot_Configvm_snapshot",
            target=ref(deployment_725e7736),
            num_of_replicas="ALL",
            restore_config=ref(restore_configs[0]),
            snapshot_location_type="LOCAL",
        )
    ]

    DOMAIN_NAME = CalmVariable.Simple(
        "ntnxlab1.local",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    AD = CalmVariable.Simple(
        "10.55.88.59",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def Snapshot_vm_snapshot():

        CalmTask.ConfigExec(
            name="Snapshot_Configvm_snapshot_Task",
            config=ref(Small.snapshot_configs[0]),
        )

    @action
    def Restore_vm_snapshot():

        CalmTask.ConfigExec(
            name="Restore_Configvm_snapshot_Task", config=ref(Small.restore_configs[0])
        )


class Medium(Profile):

    deployments = [deployment_a4f877c2]

    AD = CalmVariable.Simple(
        "10.55.88.59",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    DOMAIN = CalmVariable.Simple(
        "ntnxlab1.local",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )


class Large(Profile):

    environments = [Ref.Environment(name="OTC")]
    deployments = [deployment_17d92f43]


class Tenant1_Windows_AD(Blueprint):

    services = [Windows]
    packages = [Package1, PackageMedium, Package3]
    substrates = [WindowsAD, WindowsAD_2, WindowsAD_2_3]
    profiles = [Small, Medium, Large]
    credentials = [BP_CRED_WIN_VM_CRED, BP_CRED_DOMAIN_CRED]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
