# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_Centos2Credential_PASSWORD = read_local_file(
    "BP_CRED_Centos2Credential_PASSWORD"
)
BP_CRED_PCCredential_PASSWORD = read_local_file("BP_CRED_PCCredential_PASSWORD")
BP_CRED_CENTOS_KEY = read_local_file("BP_CRED_CENTOS_KEY")
BP_CRED_RancherCredential_PASSWORD = read_local_file(
    "BP_CRED_RancherCredential_PASSWORD"
)

# Credentials
BP_CRED_Centos2Credential = basic_cred(
    "centos",
    BP_CRED_Centos2Credential_PASSWORD,
    name="Centos 2 Credential",
    type="PASSWORD",
    default=True,
)
BP_CRED_PCCredential = basic_cred(
    "admin",
    BP_CRED_PCCredential_PASSWORD,
    name="PC Credential",
    type="PASSWORD",
)
BP_CRED_CENTOS = basic_cred(
    "centos",
    BP_CRED_CENTOS_KEY,
    name="CENTOS",
    type="KEY",
)
BP_CRED_RancherCredential = basic_cred(
    "admin",
    BP_CRED_RancherCredential_PASSWORD,
    name="Rancher Credential",
    type="PASSWORD",
)


AHV_CENTOS_78 = vm_disk_package(
    name="AHV_CENTOS_78",
    description="",
    config={
        "name": "AHV_CENTOS_78",
        "image": {
            "name": "AHV_CENTOS_78",
            "type": "DISK_IMAGE",
            "source": "http://download.nutanix.com/Calm/CentOS-7-x86_64-2003.qcow2",
            "architecture": "X86_64",
        },
        "product": {"name": "AHV_CENTOS", "version": "7.8"},
        "checksum": {},
    },
)


class rancher_service(Service):

    src_kubeconfig = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_server = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_ca = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    src_token = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def __start__():
        """System action for starting an application"""

        rancher_service.InstallRancher(name="Install Rancher")

    @action
    def DownloadKubeConfig(name="Download Kube Config"):

        CalmTask.SetVariable.escript.py2(
            name="Get Src Kubeconfig",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_DownloadKubeConfig_Task_GetSrcKubeconfig.py",
            ),
            target=ref(rancher_service),
            variables=["src_kubeconfig"],
        )

        CalmTask.Exec.ssh(
            name="Output Kubeconfig files",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_DownloadKubeConfig_Task_OutputKubeconfigfiles.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(rancher_service),
        )

    @action
    def InstallHelm(name="Install Helm"):

        CalmTask.Exec.ssh(
            name="Install Helm",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_InstallHelm_Task_InstallHelm.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(rancher_service),
        )

    @action
    def InstallRancher(name="Install Rancher"):

        CalmTask.Exec.ssh(
            name="Create Namespace",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_InstallRancher_Task_CreateNamespace.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(rancher_service),
        )

        rancher_service.InstallCertManager(name="Install CertManager")

        CalmTask.Exec.ssh(
            name="Install Rancher",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_InstallRancher_Task_InstallRancher.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(rancher_service),
        )

        CalmTask.Delay(
            name="Sleep for 60 seconds", delay_seconds=60, target=ref(rancher_service)
        )

        CalmTask.Exec.ssh(
            name="Verify Rancher installation",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_InstallRancher_Task_VerifyRancherinstallation.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(rancher_service),
        )

    @action
    def InstallCertManager(name="Install CertManager"):

        CalmTask.Exec.ssh(
            name="Install CertManager",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_InstallCertManager_Task_InstallCertManager.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(rancher_service),
        )

        CalmTask.Exec.ssh(
            name="Verify CertManager",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_InstallCertManager_Task_VerifyCertManager.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(rancher_service),
        )

    @action
    def UninstallRancher(name="Uninstall Rancher"):

        CalmTask.Exec.ssh(
            name="Uninstall Rancher",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_UninstallRancher_Task_UninstallRancher.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(rancher_service),
        )

        CalmTask.Exec.ssh(
            name="Uninstall CertManager",
            filename=os.path.join(
                "scripts",
                "Service_rancher_service_Action_UninstallRancher_Task_UninstallCertManager.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(rancher_service),
        )


class MO_Istiocalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 2
    vCPUs = 1
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "centos7-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("Primary_70", cluster="PHX-POC070")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join(
            "specs", "MO_Istiocalm_array_indexcalm_time_cloud_init_data.yaml"
        )
    )

    power_state = "ON"


class MO_Istiocalm_array_indexcalm_time(AhvVm):

    name = "MO_Istio-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = MO_Istiocalm_array_indexcalm_timeResources
    cluster = Ref.Cluster(name="PHX-POC070")


class rancher_vm(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_70")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = MO_Istiocalm_array_indexcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "rancher_vm_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="10",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class Package4(Package):

    services = [ref(rancher_service)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Install Curl",
            filename=os.path.join(
                "scripts", "Package_Package4_Action___install___Task_InstallCurl.sh"
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(rancher_service),
        )

        CalmTask.Exec.ssh(
            name="Install Kubectl",
            filename=os.path.join(
                "scripts", "Package_Package4_Action___install___Task_InstallKubectl.sh"
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(rancher_service),
        )

        rancher_service.DownloadKubeConfig(name="Download Kube Config")

        rancher_service.InstallHelm(name="Install Helm")

    @action
    def __uninstall__():

        rancher_service.UninstallRancher(name="Uninstall Rancher")


class d8a66e6a_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package4)]
    substrate = ref(rancher_vm)


class Default(Profile):

    deployments = [d8a66e6a_deployment]

    domain_name = CalmVariable.Simple(
        "ntnxlab.local",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    SRC_KUBE_CONTEXT = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_Default_variable_SRC_KUBE_CONTEXT_Task_SampleTask.py",
            ),
        ),
        label="",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    PC_IP = CalmVariable.Simple(
        "10.42.70.39",
        label="Please key in the Prism Central IP",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="Prism Central IP",
    )

    rancher_helm_chart_repo = CalmVariable.Simple(
        "stable",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    cert_manager_version = CalmVariable.Simple(
        "v1.13.4",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    @action
    def DownloadKubeConfig(name="Download Kube Config"):

        rancher_service.DownloadKubeConfig(name="Download Kube Config")


class InstallRancherintoNKE(Blueprint):
    """This blueprint will provision kubectl, helm, cert-manager and rancher into the NKE cluster.  You can access the application"""

    services = [rancher_service]
    packages = [Package4, AHV_CENTOS_78]
    substrates = [rancher_vm]
    profiles = [Default]
    credentials = [
        BP_CRED_Centos2Credential,
        BP_CRED_PCCredential,
        BP_CRED_CENTOS,
        BP_CRED_RancherCredential,
    ]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
