# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_WIN_VM_CRED_PASSWORD = read_local_file("BP_CRED_WIN_VM_CRED_PASSWORD")
BP_CRED_DOMAIN_CRED_PASSWORD = read_local_file("BP_CRED_DOMAIN_CRED_PASSWORD")

# Credentials
BP_CRED_WIN_VM_CRED = basic_cred(
    "administrator",
    BP_CRED_WIN_VM_CRED_PASSWORD,
    name="WIN_VM_CRED",
    type="PASSWORD",
    default=True,
)
BP_CRED_DOMAIN_CRED = basic_cred(
    "administrator@ntnxlab1.local",
    BP_CRED_DOMAIN_CRED_PASSWORD,
    name="DOMAIN_CRED",
    type="PASSWORD",
)


class Service1(Service):

    pass


class vmcalm_timeResources(AhvVmResources):

    memory = 2
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "windows-2022-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("SG-AMK", vpc="SingaporeVPC")]

    guest_customization = AhvVmGC.Sysprep.PreparedScript.withoutDomain(
        filename=os.path.join("specs", "vmcalm_time_sysprep_unattend_xml.xml")
    )

    power_state = "ON"
    boot_type = "LEGACY"


class vmcalm_time(AhvVm):

    name = "vm-@@{calm_time}@@"
    resources = vmcalm_timeResources
    cluster = Ref.Cluster(name="PHX-POC155")


class VM1(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_ITC")
    os_type = "Windows"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_time

    readiness_probe = readiness_probe(
        connection_type="POWERSHELL",
        disabled=False,
        retries="5",
        connection_port=5985,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_WIN_VM_CRED),
    )


class UpdateVMConfig_Update_ConfigAttrsaa1bf678(AhvUpdateConfigAttrs):

    memory = PatchField.Ahv.memory(
        value="2", operation="equal", max_val=16, min_val=2, editable=True
    )

    numsocket = PatchField.Ahv.numsocket(
        value="2", operation="equal", max_val=8, min_val=2, editable=True
    )

    disks = [
        PatchField.Ahv.Disks.modify(index=0, editable=False),
        PatchField.Ahv.Disks.add(AhvVmDisk.Disk.Scsi.allocateOnStorageContainer(10)),
    ]


class Package1(Package):

    services = [ref(Service1)]

    @action
    def __install__():

        CalmTask.Exec.powershell(
            name="Set Host Name",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_SetHostName.ps1"
            ),
            cred=ref(BP_CRED_WIN_VM_CRED),
            target=ref(Service1),
        )

        CalmTask.Delay(name="Delay for 2 mins", delay_seconds=120, target=ref(Service1))

        CalmTask.Exec.powershell(
            name="Join AD Domain",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_JoinADDomain.ps1"
            ),
            cred=ref(BP_CRED_WIN_VM_CRED),
            target=ref(Service1),
        )

    @action
    def __uninstall__():

        CalmTask.Exec.powershell(
            name="Unjoin AD Domain",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___uninstall___Task_UnjoinADDomain.ps1",
            ),
            cred=ref(BP_CRED_WIN_VM_CRED),
            target=ref(Service1),
        )

        CalmTask.Delay(name="Delay for 2 mins", delay_seconds=120, target=ref(Service1))


class b16f9bb1_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(VM1)


class Default(Profile):

    deployments = [b16f9bb1_deployment]
    patch_list = [
        AppEdit.UpdateConfig(
            name="UpdateVMConfig",
            target=ref(b16f9bb1_deployment),
            patch_attrs=UpdateVMConfig_Update_ConfigAttrsaa1bf678,
        )
    ]

    AD = CalmVariable.Simple(
        "10.55.88.59",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    DOMAIN_NAME = CalmVariable.Simple(
        "ntnxlab1.local",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    @action
    def JoinADDomain(name="Join AD Domain"):

        CalmTask.Exec.powershell(
            name="Set Host Name",
            filename=os.path.join(
                "scripts", "Profile_Default_Action_JoinADDomain_Task_SetHostName.ps1"
            ),
            cred=ref(BP_CRED_WIN_VM_CRED),
            target=ref(Service1),
        )

        CalmTask.Delay(name="Delay for 2 mins", delay_seconds=120, target=ref(Service1))

        CalmTask.Exec.powershell(
            name="Join AD Domain",
            filename=os.path.join(
                "scripts", "Profile_Default_Action_JoinADDomain_Task_JoinADDomain.ps1"
            ),
            cred=ref(BP_CRED_WIN_VM_CRED),
            target=ref(Service1),
        )


class Windows2019SingleVM(Blueprint):

    services = [Service1]
    packages = [Package1]
    substrates = [VM1]
    profiles = [Default]
    credentials = [BP_CRED_WIN_VM_CRED, BP_CRED_DOMAIN_CRED]


class BpMetadata(Metadata):

    categories = {"TemplateType": "Vm"}
    project = Ref.Project("BP Design Project")
