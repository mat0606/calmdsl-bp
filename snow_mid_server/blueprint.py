# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_RHEL_KEY = read_local_file("BP_CRED_RHEL_KEY")
BP_CRED_RHEL2Credential_PASSWORD = read_local_file("BP_CRED_RHEL2Credential_PASSWORD")
Profile_Default_variable_snow_mid_pwd = read_local_file(
    "Profile_Default_variable_snow_mid_pwd"
)

# Credentials
BP_CRED_RHEL = basic_cred(
    "nutanix",
    BP_CRED_RHEL_KEY,
    name="RHEL",
    type="KEY",
    default=True,
)
BP_CRED_RHEL2Credential = basic_cred(
    "nutanix",
    BP_CRED_RHEL2Credential_PASSWORD,
    name="RHEL 2 Credential",
    type="PASSWORD",
)


class MidServer(Service):
    @action
    def MidServerAgentInstall(name="Mid Server Agent Install"):

        CalmTask.Exec.ssh(
            name="Install Mid Server Agent",
            filename=os.path.join(
                "scripts",
                "Service_MidServer_Action_MidServerAgentInstall_Task_InstallMidServerAgent.sh",
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(MidServer),
        )

        CalmTask.Exec.ssh(
            name="Install New Mid Server",
            filename=os.path.join(
                "scripts",
                "Service_MidServer_Action_MidServerAgentInstall_Task_InstallNewMidServer.sh",
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(MidServer),
        )

    @action
    def RemoveMidServerAgent(name="Remove Mid Server Agent"):

        CalmTask.Exec.ssh(
            name="Remove Agent",
            filename=os.path.join(
                "scripts",
                "Service_MidServer_Action_RemoveMidServerAgent_Task_RemoveAgent.sh",
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(MidServer),
        )

    @action
    def InstallOpenJDK(name="Install OpenJDK"):

        CalmTask.Exec.ssh(
            name="Install OpenJDK",
            filename=os.path.join(
                "scripts",
                "Service_MidServer_Action_InstallOpenJDK_Task_InstallOpenJDK.sh",
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(MidServer),
        )

    @action
    def InstallPrerequisites(name="Install Prerequisites"):

        CalmTask.Exec.ssh(
            name="Update Packages",
            filename=os.path.join(
                "scripts",
                "Service_MidServer_Action_InstallPrerequisites_Task_UpdatePackages.sh",
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(MidServer),
        )

        MidServer.InstallOpenJDK(name="Install OpenJDK")


class snow_instance_namemidservervmResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "rhel92-calm-template.qcow2", bootable=True
        )
    ]
    nics = [
        AhvVmNic.NormalNic.ingress(
            "Primary_OTC", cluster="DM3-POC035", ip_endpoints=["10.55.35.70"]
        )
    ]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join(
            "specs", "snow_instance_namemidservervm_cloud_init_data.yaml"
        )
    )

    power_state = "ON"


class snow_instance_namemidservervm(AhvVm):

    name = "@@{snow_instance_name}@@-midserver-vm"
    resources = snow_instance_namemidservervmResources
    cluster = Ref.Cluster(name="DM3-POC035")


class servicenow_midserver(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_OTC")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = snow_instance_namemidservervm

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="15",
        credential=ref(BP_CRED_RHEL),
    )


class MidServerPackage(Package):

    services = [ref(MidServer)]

    @action
    def __install__():

        MidServer.InstallPrerequisites(name="Install Prerequisites")

        MidServer.MidServerAgentInstall(name="Mid Server Agent Install")

    @action
    def __uninstall__():

        MidServer.RemoveMidServerAgent(name="Remove Mid Server Agent")


class MidServerDeployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(MidServerPackage)]
    substrate = ref(servicenow_midserver)


class Default(Profile):

    deployments = [MidServerDeployment]

    midserver_agent_url = CalmVariable.Simple(
        "https://install.service-now.com/glide/distribution/builds/package/app-signed/mid/2024/07/27/mid.xanadu-07-02-2024__patch0-07-16-2024_07-27-2024_1019.linux.x86-64.zip",
        label="Service Now Midserver Agent Binary URL",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="Needed to download MidServer Agent Binary.  This link is applicable for Vancouver.\nTokyo link is https://install.service-now.com/glide/distribution/builds/package/app-signed/mid/2023/06/23/mid.tokyo-07-08-2022__patch9-hotfix2-06-07-2023_06-23-2023_1740.linux.x86-64.zip",
    )

    domain_name = CalmVariable.Simple(
        "ntnxlab.local",
        label="Domain Name",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    nutanix_public_key = CalmVariable.Simple(
        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCyh19kFkO3oAYZrL2wbjOoK3DzGReYF6ZY59TYyvW7bCEGh2RFsCHsGlyNSFp8U19oGykSiIQAabGR42IbByqNgZ3IGr5+4hB29+IPMHo8Qk1LnNO9O+Cb+1XxOGmX0eRZl7HJcNDAZxMgTKghmT35odMXEjX9mQaX85NYKA0/id1kd7GOQGagLVcNPklZmYbAsaTXurTwLL5M0V0M3v5cBiwT/M4SWi1e/SJoCt0wGf4EsRb6PZo2rpqB7Z+9Vv1jadS+0cOjlzJ0eAPCkliPt6LP4wcCCMYcfEMcZmvGpKhIVzppPGl7X6lCE/OXUA+7GjqsX+QjCXIgN6fQUDPbW5HzejSG+xiOF3m9WJbylzGvogx+ESyNbgweqnZ+DPraUD5pLeszidWLZXQBOaIM9plOyww9rwd+lul2fgmf73V5R4+W8Nl7eZVjC33Tar5cUEi75AroURiKS+f1YAvQ8HjLlWkIGWURIpy9GhQaz9HGWwtqwDLTcAmUg1BDTHEjKaHYz849eGxoSl+cXTxMMUulALClXvBPadKdJWYXBDQ6N0gKi4TF6XK7Lyi5IGYPuyyKqX2xkntQoGmqRV5Ovxk7h9eAgSPy8DfbSLB3nUBTmXy7/cCgVQwwSGL7L/d54kisrYdMuwRZlfRF83v30mmZmeVxZmaklbg5WRmNtQ== centos@nutanix.com",
        label="Public Key for Midserver VM",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    snow_mid_pwd = CalmVariable.Simple.Secret(
        Profile_Default_variable_snow_mid_pwd,
        label="ServiceNow Midserver User Password",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    snow_mid_user = CalmVariable.Simple(
        "admin",
        label="ServiceNow MidServer Username",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    snow_instance_name = CalmVariable.Simple(
        "dev216883",
        label="ServiceNow Instance Name",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )


class ServiceNow_MIdServer_DND20240101(Blueprint):
    """This will deploy a ServiceNow MidServer VM."""

    services = [MidServer]
    packages = [MidServerPackage]
    substrates = [servicenow_midserver]
    profiles = [Default]
    credentials = [BP_CRED_RHEL, BP_CRED_RHEL2Credential]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
