# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_PC_Creds_PASSWORD = read_local_file("BP_CRED_PC_Creds_PASSWORD")

# Credentials
BP_CRED_PC_Creds = basic_cred(
    "admin",
    BP_CRED_PC_Creds_PASSWORD,
    name="PC_Creds",
    type="PASSWORD",
    default=True,
)


class Service1(Service):

    pass


class VM1(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(os.path.join("specs", "VM1_provider_spec.yaml"))

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
    )


class Package1(Package):

    services = [ref(Service1)]

    @action
    def __install__():

        CalmTask.Exec.escript.py2(
            name="Create Bucket",
            filename=os.path.join(
                "scripts", "Package_Package1_Action___install___Task_CreateBucket.py"
            ),
            target=ref(Service1),
        )

        CalmTask.Delay(
            name="Sleep for 5 seconds", delay_seconds=15, target=ref(Service1)
        )

        CalmTask.Exec.escript.py2(
            name="Check Bucket Creation Status",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_CheckBucketCreationStatus.py",
            ),
            target=ref(Service1),
        )

        CalmTask.Exec.escript.py2(
            name="Assign Users to Bucket",
            filename=os.path.join(
                "scripts",
                "Package_Package1_Action___install___Task_AssignUserstoBucket.py",
            ),
            target=ref(Service1),
        )


class _525acce1_deployment(Deployment):

    name = "525acce1_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(VM1)


class Default(Profile):

    deployments = [_525acce1_deployment]

    PC_IP = CalmVariable.Simple(
        "10.42.71.39",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    non_current_version_expiration = CalmVariable.Simple.int(
        "0",
        label="Please select expiry of objects (no of days)",
        regex="^[\\d]*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    enable_versioning = CalmVariable.WithOptions.Predefined.Array(
        ["True", "False"],
        label="Please select enable versioning of objects",
        defaults=["False"],
        regex="^.*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    bucket_name = CalmVariable.Simple(
        "bucket",
        label="Please key in the bucket name",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    object_store_uuid = CalmVariable.Simple(
        "3c11ffbf-720a-4a0f-5718-a82cdcb2931c",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    object_users = CalmVariable.WithOptions.FromTask.Array(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_object_users_Task_SampleTask.py"
            ),
        ),
        label="Please select the users for the bucket",
        is_mandatory=False,
        is_hidden=False,
        description="",
    )


class CreateBucket(Blueprint):
    """Create Bucket in Object Store"""

    services = [Service1]
    packages = [Package1]
    substrates = [VM1]
    profiles = [Default]
    credentials = [BP_CRED_PC_Creds]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
