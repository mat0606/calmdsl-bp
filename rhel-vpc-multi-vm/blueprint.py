# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_RHEL_KEY = read_local_file("BP_CRED_RHEL_KEY")
BP_CRED_DomainAdministrator_PASSWORD = read_local_file(
    "BP_CRED_DomainAdministrator_PASSWORD"
)
BP_CRED_RHEL2Credential_PASSWORD = read_local_file("BP_CRED_RHEL2Credential_PASSWORD")

# Credentials
BP_CRED_RHEL = basic_cred(
    "nutanix",
    BP_CRED_RHEL_KEY,
    name="RHEL",
    type="KEY",
    default=True,
)
BP_CRED_DomainAdministrator = basic_cred(
    "administrator@ntnxlab1.local",
    BP_CRED_DomainAdministrator_PASSWORD,
    name="Domain Administrator",
    type="PASSWORD",
)
BP_CRED_RHEL2Credential = basic_cred(
    "nutanix",
    BP_CRED_RHEL2Credential_PASSWORD,
    name="RHEL 2 Credential",
    type="PASSWORD",
)


class RHEL_Svc(Service):
    @action
    def __delete__():
        """System action for deleting an application. Deletes created VMs as well"""

        CalmTask.Exec.ssh(
            name="Unjoin Domain",
            filename=os.path.join(
                "scripts", "Service_RHEL_Svc_Action___delete___Task_UnjoinDomain.sh"
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(RHEL_Svc),
        )

    @action
    def JoinADDomain(name="Join AD Domain"):

        CalmTask.Exec.ssh(
            name="Installed OS Packages",
            filename=os.path.join(
                "scripts",
                "Service_RHEL_Svc_Action_JoinADDomain_Task_InstalledOSPackages.sh",
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(RHEL_Svc),
        )

        CalmTask.Exec.ssh(
            name="Join DNS",
            filename=os.path.join(
                "scripts", "Service_RHEL_Svc_Action_JoinADDomain_Task_JoinDNS.sh"
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(RHEL_Svc),
        )

        RHEL_Svc.Prerequisites(name="Validate Prerequisites")

        CalmTask.Exec.ssh(
            name="Join AD Domain",
            filename=os.path.join(
                "scripts", "Service_RHEL_Svc_Action_JoinADDomain_Task_JoinADDomain.sh"
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(RHEL_Svc),
        )

    @action
    def UnjoinADDomain(name="Unjoin AD Domain"):

        CalmTask.Exec.ssh(
            name="Unjoin AD Domain",
            filename=os.path.join(
                "scripts",
                "Service_RHEL_Svc_Action_UnjoinADDomain_Task_UnjoinADDomain.sh",
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(RHEL_Svc),
        )

    @action
    def Prerequisites():

        CalmTask.Exec.ssh(
            name="Validate DNS Lookup",
            filename=os.path.join(
                "scripts",
                "Service_RHEL_Svc_Action_Prerequisites_Task_ValidateDNSLookup.sh",
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(RHEL_Svc),
        )

        CalmTask.Exec.ssh(
            name="Validate connection to AD",
            filename=os.path.join(
                "scripts",
                "Service_RHEL_Svc_Action_Prerequisites_Task_ValidateconnectiontoAD.sh",
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(RHEL_Svc),
        )

        CalmTask.Exec.ssh(
            name="Synchronize time with AD",
            filename=os.path.join(
                "scripts",
                "Service_RHEL_Svc_Action_Prerequisites_Task_SynchronizetimewithAD.sh",
            ),
            cred=ref(BP_CRED_RHEL),
            target=ref(RHEL_Svc),
        )


class rcalm_timeResources(AhvVmResources):

    memory = 2
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "rhel92-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("SG-AMK", vpc="SingaporeVPC")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "rcalm_time_cloud_init_data.yaml")
    )

    power_state = "ON"


class rcalm_time(AhvVm):

    name = "r@@{calm_time}@@"
    resources = rcalm_timeResources
    cluster = Ref.Cluster(name="PHX-POC155")
    categories = {"AppType": "Default", "Owner": "Matthew"}


class RHEL_VM_Small(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_ITC")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = rcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "RHEL_VM_Small_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_RHEL),
    )


class rcalm_timeResources(AhvVmResources):

    memory = 4
    vCPUs = 4
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "rhel92-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("SG-AMK", vpc="SingaporeVPC")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "rcalm_time_cloud_init_data.yaml")
    )

    power_state = "ON"
    boot_type = "LEGACY"


class rcalm_time(AhvVm):

    name = "r@@{calm_time}@@"
    resources = rcalm_timeResources
    cluster = Ref.Cluster(name="PHX-POC155")
    categories = {"AppType": "Default", "Owner": "Matthew"}


class RHEL_VM_Medium(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_OTC")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = rcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "RHEL_VM_Medium_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="0",
        credential=ref(BP_CRED_RHEL),
    )


class rcalm_timeResources(AhvVmResources):

    memory = 8
    vCPUs = 8
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "rhel92-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("SG-AMK", vpc="SingaporeVPC")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "rcalm_time_cloud_init_data.yaml")
    )

    power_state = "ON"
    boot_type = "LEGACY"


class rcalm_time(AhvVm):

    name = "r@@{calm_time}@@"
    resources = rcalm_timeResources
    cluster = Ref.Cluster(name="PHX-POC155")
    categories = {"AppType": "Default", "Owner": "Matthew"}


class RHEL_VM_Large(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_OTC")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = rcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "RHEL_VM_Large_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="0",
        credential=ref(BP_CRED_RHEL),
    )


class UpdateVMSpec_Update_ConfigAttrs2307feae(AhvUpdateConfigAttrs):

    memory = PatchField.Ahv.memory(
        value="2", operation="equal", max_val=4, min_val=2, editable=True
    )
    vcpu = PatchField.Ahv.vcpu(value="1", operation="equal", editable=False)
    numsocket = PatchField.Ahv.numsocket(
        value="2", operation="equal", max_val=4, min_val=2, editable=True
    )

    disks = [
        PatchField.Ahv.Disks.modify(index=0, editable=False),
        PatchField.Ahv.Disks.add(AhvVmDisk.Disk.Scsi.allocateOnStorageContainer(100)),
    ]


class Package1(Package):

    services = [ref(RHEL_Svc)]

    @action
    def __install__():

        RHEL_Svc.JoinADDomain(name="Join AD Domain")


class Package3(Package):

    services = [ref(RHEL_Svc)]

    @action
    def __install__():

        RHEL_Svc.JoinADDomain(name="Join AD Domain")


class Package4(Package):

    services = [ref(RHEL_Svc)]


class b1a5673a_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(RHEL_VM_Small)


class b40b4e90_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package3)]
    substrate = ref(RHEL_VM_Medium)


class _847a8ef3_deployment(Deployment):

    name = "847a8ef3_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package4)]
    substrate = ref(RHEL_VM_Large)


class Small(Profile):

    deployments = [b1a5673a_deployment]
    patch_list = [
        AppEdit.UpdateConfig(
            name="Update VM Spec",
            target=ref(b1a5673a_deployment),
            patch_attrs=UpdateVMSpec_Update_ConfigAttrs2307feae,
        )
    ]

    domain_name = CalmVariable.Simple(
        "ntnxlab1.local",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    Domain_Server_IP = CalmVariable.Simple(
        "10.55,88.59",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    Domain_Server = CalmVariable.Simple(
        "WIN-2U3E71T1COI",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )


class Medium(Profile):

    deployments = [b40b4e90_deployment]

    domain_name = CalmVariable.Simple(
        "ntnxlab1.local",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    Domain_Server_IP = CalmVariable.Simple(
        "10.55.88.59",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    Domain_Server = CalmVariable.Simple(
        "WIN-2U3E71T1COI",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )


class Large(Profile):

    deployments = [_847a8ef3_deployment]

    domain_name = CalmVariable.Simple(
        "ntnxlab1.local",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    Domain_Server_IP = CalmVariable.Simple(
        "10.55.88.59",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    Domain_Server = CalmVariable.Simple(
        "WIN-2U3E71T1COI",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )


class RHELAD_20240407VPC(Blueprint):

    services = [RHEL_Svc]
    packages = [Package1, Package3, Package4]
    substrates = [RHEL_VM_Small, RHEL_VM_Medium, RHEL_VM_Large]
    profiles = [Small, Medium, Large]
    credentials = [BP_CRED_RHEL, BP_CRED_DomainAdministrator, BP_CRED_RHEL2Credential]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
