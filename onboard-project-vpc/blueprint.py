# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables

BP_CRED_PCCredential_PASSWORD = read_local_file("BP_CRED_PCCredential_PASSWORD")
BP_CRED_PECredential_PASSWORD = read_local_file("BP_CRED_PECredential_PASSWORD")
BP_CRED_Centos2Credential_PASSWORD = read_local_file(
    "BP_CRED_Centos2Credential_PASSWORD"
)
BP_CRED_WIN_CRED_PASSWORD = read_local_file("BP_CRED_WIN_CRED_PASSWORD")
BP_CRED_PE_SC_Creds_PASSWORD = read_local_file("BP_CRED_PE_SC_Creds_PASSWORD")
BP_CRED_DOMAIN_CRED_PASSWORD = read_local_file("BP_CRED_DOMAIN_CRED_PASSWORD")
BP_CRED_CalmVMCredential_PASSWORD = read_local_file("BP_CRED_CalmVMCredential_PASSWORD")
BP_CRED_RHEL_KEY = read_local_file("BP_CRED_RHEL_KEY")
BP_CRED_RHEL2Credential_PASSWORD = read_local_file("BP_CRED_RHEL2Credential_PASSWORD")

# Credentials
BP_CRED_PCCredential = basic_cred(
    "admin",
    BP_CRED_PCCredential_PASSWORD,
    name="PC Credential",
    type="PASSWORD",
    default=True,
)
BP_CRED_PECredential = basic_cred(
    "admin",
    BP_CRED_PECredential_PASSWORD,
    name="PE Credential",
    type="PASSWORD",
)
BP_CRED_Centos2Credential = basic_cred(
    "centos",
    BP_CRED_Centos2Credential_PASSWORD,
    name="Centos 2 Credential",
    type="PASSWORD",
)
BP_CRED_WIN_CRED = basic_cred(
    "Administrator",
    BP_CRED_WIN_CRED_PASSWORD,
    name="WIN_CRED",
    type="PASSWORD",
)
BP_CRED_PE_SC_Creds = basic_cred(
    "admin",
    BP_CRED_PE_SC_Creds_PASSWORD,
    name="PE_SC_Creds",
    type="PASSWORD",
)
BP_CRED_DOMAIN_CRED = basic_cred(
    "administrator@ntnxlab.local",
    BP_CRED_DOMAIN_CRED_PASSWORD,
    name="DOMAIN_CRED",
    type="PASSWORD",
)
BP_CRED_CalmVMCredential = basic_cred(
    "admin",
    BP_CRED_CalmVMCredential_PASSWORD,
    name="CalmVM Credential",
    type="PASSWORD",
)
BP_CRED_RHEL = basic_cred(
    "nutanix",
    BP_CRED_RHEL_KEY,
    name="RHEL",
    type="KEY",
)
BP_CRED_RHEL2Credential = basic_cred(
    "nutanix",
    BP_CRED_RHEL2Credential_PASSWORD,
    name="RHEL 2 Credential",
    type="PASSWORD",
)


class Onboard_Tenant_Service(Service):

    Tenant_Consumer_List = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    Tenant_Admin_List = CalmVariable.WithOptions.Predefined.Array(
        [""],
        label="",
        defaults=[""],
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    Tenant_Consumer_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    image_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    pe_network_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    project_admin_role_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    consumer_role_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    pe_account_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    account_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    cluster_account_reference_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    WIN_SPEC = CalmVariable.Simple.multiline(
        "",
        label="",
        regex="^(.|\n)*$",
        validate_regex=False,
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    LINUX_SPEC = CalmVariable.Simple.multiline(
        "",
        label="",
        regex="^(.|\n)*$",
        validate_regex=False,
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    credential_list = CalmVariable.Simple.multiline(
        "",
        label="",
        regex="^(.|\n)*$",
        validate_regex=False,
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    @action
    def __delete__():
        """System action for deleting an application. Deletes created VMs as well"""

        Onboard_Tenant_Service.DeleteCalmApplication(name="Delete Calm Application")

    @action
    def CreateEnvironment(name="Create Environment"):

        CalmTask.SetVariable.escript.py2(
            name="Get Linux Disk Image UUID",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateEnvironment_Task_GetLinuxDiskImageUUID.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["image_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Win Disk Image UUID",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateEnvironment_Task_GetWinDiskImageUUID.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["win_image_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Windows Spec",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateEnvironment_Task_GetWindowsSpec.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=[
                "WIN_SPEC",
                "cred_win_uuid",
                "cred_win_domain_uuid",
                "win_subtrate_uuid",
            ],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Linux Spec",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateEnvironment_Task_GetLinuxSpec.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["LINUX_SPEC", "cred_uuid", "cred2_uuid", "subtrate_uuid"],
        )

        CalmTask.SetVariable.escript.py2(
            name="GetAvailabilityZoneUUID",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateEnvironment_Task_GetAvailabilityZoneUUID.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["az_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Credential Spec",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateEnvironment_Task_GetCredentialSpec.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["credential_list"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Create Calm Environment",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateEnvironment_Task_CreateCalmEnvironment.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["Environment_UUID"],
        )

        CalmTask.Exec.escript.py2(
            name="Add Environment to Project",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateEnvironment_Task_AddEnvironmenttoProject.py",
            ),
            target=ref(Onboard_Tenant_Service),
        )

    @action
    def CreateProject(name="Create Project"):

        CalmTask.SetVariable.escript.py2(
            name="Create New Project",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateProject_Task_CreateNewProject.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["Project_UUID"],
        )

        CalmTask.Delay(
            name="Delay for 10 seconds",
            delay_seconds=10,
            target=ref(Onboard_Tenant_Service),
        )

        CalmTask.Exec.escript.py2(
            name="Check Project Creation Status",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateProject_Task_CheckProjectCreationStatus.py",
            ),
            target=ref(Onboard_Tenant_Service),
        )

    @action
    def Assignblueprinttoproject(name="Assign blueprint to project"):

        CalmTask.Exec.escript.py2(
            name="Assign marketplace items to project",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_Assignblueprinttoproject_Task_Assignmarketplaceitemstoproject.py",
            ),
            target=ref(Onboard_Tenant_Service),
        )

    @action
    def DeleteCalmApplication(name="Delete Calm Application"):

        CalmTask.Exec.escript.py2(
            name="Delete Project from Marketplace item",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_DeleteCalmApplication_Task_DeleteProjectfromMarketplaceitem.py",
            ),
            target=ref(Onboard_Tenant_Service),
        )

        CalmTask.Exec.escript.py2(
            name="Delete Environment",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_DeleteCalmApplication_Task_DeleteEnvironment.py",
            ),
            target=ref(Onboard_Tenant_Service),
        )

        CalmTask.Exec.escript.py2(
            name="Delete Project",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_DeleteCalmApplication_Task_DeleteProject.py",
            ),
            target=ref(Onboard_Tenant_Service),
        )

        CalmTask.Exec.escript.py2(
            name="Check Project Deletion Status",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_DeleteCalmApplication_Task_CheckProjectDeletionStatus.py",
            ),
            target=ref(Onboard_Tenant_Service),
        )

    @action
    def AddUser(name="Add User"):

        CalmTask.Exec.escript.py2(
            name="Add users to project",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_AddUser_Task_Adduserstoproject.py",
            ),
            target=ref(Onboard_Tenant_Service),
        )

    @action
    def tmp():

        CalmTask.Exec.escript.py2(
            name="Assign marketplace item",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_tmp_Task_Assignmarketplaceitem.py",
            ),
            target=ref(Onboard_Tenant_Service),
        )

    @action
    def CreateRHELEnvironment(name="Create RHEL Environment"):

        CalmTask.SetVariable.escript.py2(
            name="Get Linux Disk Image UUID",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateRHELEnvironment_Task_GetLinuxDiskImageUUID.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["image_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Win Disk Image UUID",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateRHELEnvironment_Task_GetWinDiskImageUUID.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["win_image_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Windows Spec",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateRHELEnvironment_Task_GetWindowsSpec.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=[
                "WIN_SPEC",
                "cred_win_uuid",
                "cred_win_domain_uuid",
                "win_subtrate_uuid",
            ],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Linux RHEL Spec",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateRHELEnvironment_Task_GetLinuxRHELSpec.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["LINUX_SPEC", "cred_uuid", "cred2_uuid", "subtrate_uuid"],
        )

        CalmTask.SetVariable.escript.py2(
            name="GetAvailabilityZoneUUID",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateRHELEnvironment_Task_GetAvailabilityZoneUUID.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["az_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Credential Spec",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateRHELEnvironment_Task_GetCredentialSpec.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["credential_list"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Create RHEL Environment",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateRHELEnvironment_Task_CreateRHELEnvironment.py",
            ),
            target=ref(Onboard_Tenant_Service),
            variables=["Environment_UUID"],
        )

        CalmTask.Exec.escript.py2(
            name="Add Environment to Project",
            filename=os.path.join(
                "scripts",
                "Service_Onboard_Tenant_Service_Action_CreateRHELEnvironment_Task_AddEnvironmenttoProject.py",
            ),
            target=ref(Onboard_Tenant_Service),
        )


class VM1(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(os.path.join("specs", "VM1_provider_spec.yaml"))

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
    )

    @action
    def __pre_create__():

        CalmTask.SetVariable.escript.py2(
            name="Get Tenant Admin UUID",
            filename=os.path.join(
                "scripts",
                "Substrate_VM1_Action___pre_create___Task_GetTenantAdminUUID.py",
            ),
            target=ref(VM1),
            variables=["Tenant_Admin_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Consumer UUID",
            filename=os.path.join(
                "scripts", "Substrate_VM1_Action___pre_create___Task_GetConsumerUUID.py"
            ),
            target=ref(VM1),
            variables=["Tenant_Consumer_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Project Admin Role UUID",
            filename=os.path.join(
                "scripts",
                "Substrate_VM1_Action___pre_create___Task_GetProjectAdminRoleUUID.py",
            ),
            target=ref(VM1),
            variables=["project_admin_role_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Consumer Role UUID",
            filename=os.path.join(
                "scripts",
                "Substrate_VM1_Action___pre_create___Task_GetConsumerRoleUUID.py",
            ),
            target=ref(VM1),
            variables=["consumer_role_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="GetVPCUUID",
            filename=os.path.join(
                "scripts", "Substrate_VM1_Action___pre_create___Task_GetVPCUUID.py"
            ),
            target=ref(VM1),
            variables=["vpc_uuid"],
        )

        CalmTask.SetVariable.escript.py2(
            name="GetNetworkUUID",
            filename=os.path.join(
                "scripts", "Substrate_VM1_Action___pre_create___Task_GetNetworkUUID.py"
            ),
            target=ref(VM1),
            variables=["pe_network_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Account UUID",
            filename=os.path.join(
                "scripts", "Substrate_VM1_Action___pre_create___Task_GetAccountUUID.py"
            ),
            target=ref(VM1),
            variables=["account_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get PE Account UUID",
            filename=os.path.join(
                "scripts",
                "Substrate_VM1_Action___pre_create___Task_GetPEAccountUUID.py",
            ),
            target=ref(VM1),
            variables=["pe_account_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Get Cluster Account Reference UUID",
            filename=os.path.join(
                "scripts",
                "Substrate_VM1_Action___pre_create___Task_GetClusterAccountReferenceUUID.py",
            ),
            target=ref(VM1),
            variables=["cluster_account_reference_UUID"],
        )


class Package1(Package):

    services = [ref(Onboard_Tenant_Service)]

    @action
    def __install__():

        Onboard_Tenant_Service.CreateProject(name="Create Project")

        Onboard_Tenant_Service.CreateEnvironment(name="Create Environment")

        Onboard_Tenant_Service.Assignblueprinttoproject(
            name="Assign blueprint to project"
        )

        Onboard_Tenant_Service.AddUser(name="Add User to Project")


class _13281576_deployment(Deployment):

    name = "13281576_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(VM1)


class Default(Profile):

    deployments = [_13281576_deployment]

    Environment_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=True, runtime=False, description=""
    )

    Project_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=True, runtime=False, description=""
    )

    CalmVM_IP = CalmVariable.Simple(
        "10.38.178.40",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    PC_IP = CalmVariable.Simple(
        "10.42.110.39",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    MarketPlace_item = CalmVariable.WithOptions.FromTask.Array(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_Default_variable_MarketPlace_item_Task_SampleTask.py",
            ),
        ),
        label="Please select the Calm Marketplace Blueprint",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    win_env_image = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_win_env_image_Task_SampleTask.py"
            ),
        ),
        label="Please select the Windows disk image for the environment",
        is_mandatory=False,
        is_hidden=False,
        description="",
    )

    env_rhel_image = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_env_rhel_image_Task_SampleTask.py"
            ),
        ),
        label="Please select a RHEL disk image",
        is_mandatory=False,
        is_hidden=False,
        description="",
    )

    env_image = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_env_image_Task_SampleTask.py"
            ),
        ),
        label="Please select the Linux disk image for the environment",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    PE_Storage_Container_Name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_Default_variable_PE_Storage_Container_Name_Task_SampleTask.py",
            ),
        ),
        label="Please select the Storage Container in the Cluster",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    PE_Network = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_PE_Network_Task_SampleTask.py"
            ),
        ),
        label="Please select the Subnet in the VPC",
        regex="^.*$",
        validate_regex=False,
        is_mandatory=False,
        is_hidden=False,
        description="",
    )

    vpc_name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_vpc_name_Task_SampleTask.py"
            ),
        ),
        label="Please select the VPC",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    account_name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_account_name_Task_SampleTask.py"
            ),
        ),
        label="Please select the account",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    Project_name = CalmVariable.Simple(
        "",
        label="Please key in the Project Name",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    Tenant_Consumer = CalmVariable.WithOptions.FromTask.Array(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_Tenant_Consumer_Task_SampleTask.py"
            ),
        ),
        label="Please select the self service portal user",
        regex="^.*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    Tenant_Admin = CalmVariable.WithOptions.FromTask.Array(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_Tenant_Admin_Task_SampleTask.py"
            ),
        ),
        label="Please select the Project Admin",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    cluster_ip = CalmVariable.Simple(
        "10.42.110.37",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    cluster_uuid = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_cluster_uuid_Task_SampleTask.py"
            ),
        ),
        label="",
        is_mandatory=False,
        is_hidden=False,
        description="",
    )

    Cluster_Name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_Cluster_Name_Task_SampleTask.py"
            ),
        ),
        label="Please select the Nutanix Cluster",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    pc_calm_setup = CalmVariable.WithOptions.Predefined.Array(
        ["nutanix_pc", "nutanix"],
        label="Please select the Calm setup",
        defaults=["nutanix_pc"],
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="1.  Choose nutanix_pc for PC accounts\n2.  Choose nutanix for PE accounts",
    )

    availability_zone_name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts",
                "Profile_Default_variable_availability_zone_name_Task_SampleTask.py",
            ),
        ),
        label="Please select the availability zone",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    @action
    def AddEnvironmenttoProject(name="Add Environment to Project"):

        Onboard_Tenant_Service.CreateEnvironment(name="Add Environment to Project")


class Onboard_Project20230711(Blueprint):

    services = [Onboard_Tenant_Service]
    packages = [Package1]
    substrates = [VM1]
    profiles = [Default]
    credentials = [
        BP_CRED_PCCredential,
        BP_CRED_PECredential,
        BP_CRED_Centos2Credential,
        BP_CRED_WIN_CRED,
        BP_CRED_PE_SC_Creds,
        BP_CRED_DOMAIN_CRED,
        BP_CRED_CalmVMCredential,
        BP_CRED_RHEL,
        BP_CRED_RHEL2Credential,
    ]
