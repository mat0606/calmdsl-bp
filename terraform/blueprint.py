# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import CalmTask as CalmVarTask
from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_ROCKY_KEY = read_local_file("BP_CRED_ROCKY_KEY")
BP_CRED_DomainAdministrator_PASSWORD = read_local_file(
    "BP_CRED_DomainAdministrator_PASSWORD"
)
BP_CRED_ROCKY2Credential_PASSWORD = read_local_file("BP_CRED_ROCKY2Credential_PASSWORD")

# Credentials
BP_CRED_ROCKY = basic_cred(
    "nutanix",
    BP_CRED_ROCKY_KEY,
    name="ROCKY",
    type="KEY",
    default=True,
)
BP_CRED_DomainAdministrator = basic_cred(
    "administrator",
    BP_CRED_DomainAdministrator_PASSWORD,
    name="Domain Administrator",
    type="PASSWORD",
)
BP_CRED_ROCKY2Credential = basic_cred(
    "nutanix",
    BP_CRED_ROCKY2Credential_PASSWORD,
    name="ROCKY 2 Credential",
    type="PASSWORD",
)


class Rocky(Service):
    @action
    def __delete__(type="system"):
        """System action for deleting an application. Deletes created VMs as well"""

        Rocky.UnjoinADDomain(name="Unjoin AD Domain")

    @action
    def InstallTerraform(
        name="Install Terraform",
    ):

        CalmTask.Exec.ssh(
            name="Update Library",
            filename=os.path.join(
                "scripts", "Service_Rocky_Action_InstallTerraform_Task_UpdateLibrary.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Install Terraform",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_InstallTerraform_Task_InstallTerraform.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Check Terraform version",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_InstallTerraform_Task_CheckTerraformversion.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Install GIT",
            filename=os.path.join(
                "scripts", "Service_Rocky_Action_InstallTerraform_Task_InstallGIT.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

    @action
    def InstallDocker(
        name="Install Docker",
    ):

        CalmTask.Exec.ssh(
            name="Install Docker",
            filename=os.path.join(
                "scripts", "Service_Rocky_Action_InstallDocker_Task_InstallDocker.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

    @action
    def JoinADDomain(
        name="Join AD Domain",
    ):

        CalmTask.Exec.ssh(
            name="Installed OS Packages",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_JoinADDomain_Task_InstalledOSPackages.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Configure DNS resolution",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_JoinADDomain_Task_ConfigureDNSresolution.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        Rocky.JoinADPrerequisities(name="Validate Join AD Prerequisites")

        CalmTask.Exec.ssh(
            name="Join AD Domain",
            filename=os.path.join(
                "scripts", "Service_Rocky_Action_JoinADDomain_Task_JoinADDomain.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

    @action
    def JoinADPrerequisities(
        name="Join AD Prerequisities",
    ):

        CalmTask.Exec.ssh(
            name="Validate DNS Lookup",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_JoinADPrerequisities_Task_ValidateDNSLookup.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Validate connection to AD",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_JoinADPrerequisities_Task_ValidateconnectiontoAD.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Synchronize time with AD",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_JoinADPrerequisities_Task_SynchronizetimewithAD.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

    @action
    def UnjoinADDomain(
        name="Unjoin AD Domain",
    ):

        CalmTask.Exec.ssh(
            name="Unjoin AD Domain",
            filename=os.path.join(
                "scripts", "Service_Rocky_Action_UnjoinADDomain_Task_UnjoinADDomain.sh"
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

    @action
    def InstallNutanixTerraformProvider(
        name="Install Nutanix Terraform Provider",
    ):

        CalmTask.Exec.ssh(
            name="Install prerequisites",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_InstallNutanixTerraformProvider_Task_Installprerequisites.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )

        CalmTask.Exec.ssh(
            name="Install Terraform Prism Central Provider",
            filename=os.path.join(
                "scripts",
                "Service_Rocky_Action_InstallNutanixTerraformProvider_Task_InstallTerraformPrismCentralProvider.sh",
            ),
            cred=ref(BP_CRED_ROCKY),
            target=ref(Rocky),
        )


class ccalm_timeResources(AhvVmResources):

    memory = 2
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "rocky95-calm-template.qcow2", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("Calm_Primary_ITC", cluster="PHX-POC155")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "ccalm_time_cloud_init_data.yaml")
    )

    power_state = "ON"


class ccalm_time(AhvVm):

    name = "c@@{calm_time}@@"
    resources = ccalm_timeResources
    cluster = Ref.Cluster(name="PHX-POC155")
    categories = {"Owner": "Matthew"}


class Rocky_VM(Substrate):

    account = Ref.Account("NTNX_LOCAL_AZ_ITC")
    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = ccalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "Rocky_VM_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_ROCKY),
    )


class Package1(Package):

    services = [ref(Rocky)]

    @action
    def __install__(type="system"):

        Rocky.JoinADDomain(name="Join AD Domain")

        Rocky.InstallTerraform(name="Install Terraform")

        Rocky.InstallDocker(name="Install Docker")

        Rocky.InstallNutanixTerraformProvider(name="Install Nutanix Terraform Provider")


class b1a5673a_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(Rocky_VM)


class Default(Profile):

    deployments = [b1a5673a_deployment]

    domain_name = CalmVariable.Simple(
        "ntnxlab1.local",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    Domain_Server_IP = CalmVariable.Simple(
        "10.55.88.59",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    Domain_Server = CalmVariable.Simple(
        "WIN-2U3E71T1COI",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    terraform_version = CalmVariable.Simple(
        "1.9.2",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )


class Terraform_20240722(Blueprint):

    services = [Rocky]
    packages = [Package1]
    substrates = [Rocky_VM]
    profiles = [Default]
    credentials = [BP_CRED_ROCKY, BP_CRED_DomainAdministrator, BP_CRED_ROCKY2Credential]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
