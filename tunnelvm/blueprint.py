# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.runbooks import CalmEndpoint as Endpoint

# Secret Variables

BP_CRED_PCCredential_PASSWORD = read_local_file("BP_CRED_PCCredential_PASSWORD")
BP_CRED_PECredential_PASSWORD = read_local_file("BP_CRED_PECredential_PASSWORD")
BP_CRED_CalmVMCredential_PASSWORD = read_local_file("BP_CRED_CalmVMCredential_PASSWORD")

# Credentials
BP_CRED_PCCredential = basic_cred(
    "admin",
    BP_CRED_PCCredential_PASSWORD,
    name="PC Credential",
    type="PASSWORD",
    default=True,
)
BP_CRED_PECredential = basic_cred(
    "admin",
    BP_CRED_PECredential_PASSWORD,
    name="PE Credential",
    type="PASSWORD",
)
BP_CRED_CalmVMCredential = basic_cred(
    "admin",
    BP_CRED_CalmVMCredential_PASSWORD,
    name="CalmVM Credential",
    type="PASSWORD",
)


class Service1(Service):

    network_group_uuid = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def __delete__():
        """System action for deleting an application. Deletes created VMs as well"""

        Service1.DeleteTunnelVM(name="Delete Tunnel VM")

    @action
    def CreateTunnelVM(name="Create Tunnel VM"):

        CalmTask.SetVariable.escript.py2(
            name="GetVPCUUID",
            filename=os.path.join(
                "scripts", "Service_Service1_Action_CreateTunnelVM_Task_GetVPCUUID.py"
            ),
            target=ref(Service1),
            variables=["vpc_uuid"],
        )

        CalmTask.SetVariable.escript.py2(
            name="GetAccountUUID",
            filename=os.path.join(
                "scripts",
                "Service_Service1_Action_CreateTunnelVM_Task_GetAccountUUID.py",
            ),
            target=ref(Service1),
            variables=["account_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="GetSubnetUUID",
            filename=os.path.join(
                "scripts",
                "Service_Service1_Action_CreateTunnelVM_Task_GetSubnetUUID.py",
            ),
            target=ref(Service1),
            variables=["pe_network_UUID"],
        )

        CalmTask.SetVariable.escript.py2(
            name="GetClusterUUID",
            filename=os.path.join(
                "scripts",
                "Service_Service1_Action_CreateTunnelVM_Task_GetClusterUUID.py",
            ),
            target=ref(Service1),
            variables=["pe_cluster_uuid"],
        )

        CalmTask.SetVariable.escript.py2(
            name="Provision Tunnel VM",
            filename=os.path.join(
                "scripts",
                "Service_Service1_Action_CreateTunnelVM_Task_ProvisionTunnelVM.py",
            ),
            target=ref(Service1),
            variables=["network_group_uuid"],
        )

        CalmTask.Delay(name="Delay for 3 mins", delay_seconds=180, target=ref(Service1))

        CalmTask.Exec.escript.py2(
            name="Verify Tunnel Status",
            filename=os.path.join(
                "scripts",
                "Service_Service1_Action_CreateTunnelVM_Task_VerifyTunnelStatus.py",
            ),
            target=ref(Service1),
        )

    @action
    def DeleteTunnelVM(name="Delete Tunnel VM"):

        CalmTask.SetVariable.escript.py2(
            name="GetTunnelUUID",
            filename=os.path.join(
                "scripts",
                "Service_Service1_Action_DeleteTunnelVM_Task_GetTunnelUUID.py",
            ),
            target=ref(Service1),
            variables=["tunnel_uuid"],
        )

        CalmTask.Exec.escript.py2(
            name="Delete Network Group and Tunnel",
            filename=os.path.join(
                "scripts",
                "Service_Service1_Action_DeleteTunnelVM_Task_DeleteNetworkGroupandTunnel.py",
            ),
            target=ref(Service1),
        )


class VM1(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(os.path.join("specs", "VM1_provider_spec.yaml"))

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
        credential=ref(BP_CRED_PCCredential),
    )


class Package1(Package):

    services = [ref(Service1)]

    @action
    def __install__():

        Service1.CreateTunnelVM(name="Create Tunnel VM")


class _678c0ea8_deployment(Deployment):

    name = "678c0ea8_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(VM1)


class Default(Profile):

    deployments = [_678c0ea8_deployment]

    subnet_name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_subnet_name_Task_SampleTask.py"
            ),
        ),
        label="Please select the subnet in VPC",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    vpc_name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_vpc_name_Task_SampleTask.py"
            ),
        ),
        label="Please select the VPC",
        is_mandatory=False,
        is_hidden=False,
        description="",
    )

    PE_IP = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_PE_IP_Task_SampleTask.py"
            ),
        ),
        label="Select Prism Cluster IP",
        is_mandatory=True,
        is_hidden=False,
        description="",
    )

    PC_IP = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_PC_IP_Task_SampleTask.py"
            ),
        ),
        label="Select Prism Central IP",
        is_mandatory=False,
        is_hidden=False,
        description="",
    )

    account_name = CalmVariable.WithOptions.FromTask(
        CalmTask.Exec.escript.py2(
            name="",
            filename=os.path.join(
                "scripts", "Profile_Default_variable_account_name_Task_SampleTask.py"
            ),
        ),
        label="Select account name",
        is_mandatory=False,
        is_hidden=False,
        description="",
    )

    CalmVM_IP = CalmVariable.Simple(
        "10.42.70.50",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    pc_calm_setup = CalmVariable.WithOptions.Predefined.Array(
        ["nutanix_pc", "nutanix"],
        label="",
        defaults=["nutanix_pc"],
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="1.  Choose nutanix_pc for PC accounts\n2.  Choose nutanix for PE accounts",
    )

    @action
    def CreateTunnelVM(name="Create Tunnel VM"):

        Service1.CreateTunnelVM(name="Create Tunnel VM")

    @action
    def DeleteTunnelVM(name="Delete Tunnel VM"):

        Service1.DeleteTunnelVM(name="Delete Tunnel VM")


class TunnelVM20240529(Blueprint):

    services = [Service1]
    packages = [Package1]
    substrates = [VM1]
    profiles = [Default]
    credentials = [BP_CRED_PCCredential, BP_CRED_PECredential, BP_CRED_CalmVMCredential]


class BpMetadata(Metadata):

    project = Ref.Project("BP Design Project")
